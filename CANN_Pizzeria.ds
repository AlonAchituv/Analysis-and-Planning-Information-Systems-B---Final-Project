/*
 * Author       : noaez_post
 * Generated on : 21-Sep-2025 02:54:56
 * Version      : 1.0
 */
 application "CANN Pizzeria"
 {
 	date format = "dd-MMM-yyyy"
 	time zone = "Asia/Jerusalem"
 	time format = "24-hr"
 	forms
	{
		form Customers
		{
			success message = "Customer Added Successfully!"
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have customer_name
			(
    			type = name
				displayname = "Name"
     			prefix
     			(
	     			 type = prefix
	     			 displayname ="Prefix"
	     			 visibility = false
	     			 value = {"Mr.","Mrs.","Ms."}
     			) 
     			first_name
     			(
	     			 type = first_name
	     			 displayname ="First Name"
     			) 
     			last_name
     			(
	     			 type = last_name
	     			 displayname ="Last Name"
     			) 
     			suffix
     			(
	     			 type = suffix
	     			 displayname ="Suffix"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			must have customer_phone
			(
    			type = phonenumber
				displayname = "Phone"
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			customer_email
			(
    			type = email
				displayname = "Email"
				maxchar = 80
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			customer_address
			(
    			type = address
				displayname = "Address"
     			capture_coordinates = true
     			adjust_using_map = false
     			address_line_1
     			(
	     			  type = address_line_1
	     			  displayname = "Address"
     			) 
     			address_line_2
     			(
	     			  type = address_line_2
	     			  displayname = "Address Line 2"
	     			 visibility = false
     			) 
     			district_city
     			(
	     			  type = district_city
	     			  displayname = "City"
     			) 
     			state_province
     			(
	     			  type = state_province
	     			  displayname = "State / Province"
	     			 visibility = false
     			) 
     			postal_Code
     			(
	     			  type = postal_Code
	     			  displayname = "Zip Code"
	     			 visibility = false
     			) 
     			country
     			(
	     			  type = country
	     			  displayname = "Country"
	     			 visibility = false
     			) 
     			latitude
     			(
	     			  type = latitude
	     			  displayname = "latitude"
	     			 visibility = false
     			) 
     			longitude
     			(
	     			  type = longitude
	     			  displayname = "longitude"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			returning_customer
			(
    			type = checkbox
				displayname = "Returning Customer"
				initial value = false
	 			row = 1
	 			column = 1   
				width = medium
			)
			orders_history
			(
				type = grid
				displayname = "Orders History"
				values  = In_Place_Customer_Orders.ID
    			bidirectional = customer_phone
	 			row = 2
	 			column = 1   
				width = medium
			)
	
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Cancel1
					(
   						type = reset
   						displayname = "Cancel"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Employees
		{
			success message = "Employee Added Successfully!"
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have employee_name
			(
    			type = name
				displayname = "Name"
     			prefix
     			(
	     			 type = prefix
	     			 displayname ="Prefix"
	     			 visibility = false
	     			 value = {"Mr.","Mrs.","Ms."}
     			) 
     			first_name
     			(
	     			 type = first_name
	     			 displayname ="First Name"
     			) 
     			last_name
     			(
	     			 type = last_name
	     			 displayname ="Last Name"
     			) 
     			suffix
     			(
	     			 type = suffix
	     			 displayname ="Suffix"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			must have employee_phone
			(
    			type = phonenumber
				displayname = "Phone"
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			must have employee_email
			(
    			type = email
				displayname = "Email"
				maxchar = 80
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			must have employee_type
			(
				type = picklist
				displayname = "Type"
				maxchar = 100
				values = {"Cook","Line Worker","Cleaning","Delivery Driver"}
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have hourly_rate
			(
				displayname = "Hourly Rate"
				type = ILS
				format = commadotwestern
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have is_active
			(
    			type = checkbox
				displayname = "Active"
				initial value = true
	 			row = 1
	 			column = 1   
				width = medium
			)
			shifts
			(
				type = grid
				displayname = "Shifts"
				values  = Shifts_Assigments.ID
    			bidirectional = employee
	 			row = 2
	 			column = 1   
				width = medium
			)
	
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Cancel1
					(
   						type = reset
   						displayname = "Cancel"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Employees_Absences
		{
			displayname = "Employees Absences"
			success message = "Absence Added Successfully!"
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have employee
			(
				type = picklist	
				displayname = "Employee"
				values  = Employees[is_active == true].ID
    			displayformat = [" " + employee_name.first_name + " " + employee_name.last_name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have absence_date
			(
    			type = date
				displayname = "Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have shifts_types
			(
				type = checkboxes	
				displayname = "Shifts Types"
				values  = Shifts_Types.ID
    			displayformat = [shift_type]
	 			row = 1
	 			column = 1   
				width = medium
			)
			reason
			(
    			type = text
				displayname = "Reason"
	 			row = 1
	 			column = 1   
				width = large
			)
	
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Cancel1
					(
   						type = reset
   						displayname = "Cancel"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Finance_Records
		{
			displayname = "Finance Records"
			success message = "Finance Record Added Successfully!"
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			record_date_time
			(
    			type = datetime
				displayname = "Date-Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			record_type_dropdown
			(
				type = picklist
				displayname = "Record Type"
				maxchar = 100
				values = {"Payroll","Customer order - online","Customer order - in place","Supplier order"}
	 			row = 1
	 			column = 1   
				width = medium
			)
			record_type_text
			(
    			type = text
				displayname = "Record Type Description"
	 			row = 1
	 			column = 1   
				width = medium
			)
			amount
			(
				displayname = "Amount"
				type = ILS
				format = commadotwestern
	 			row = 1
	 			column = 1   
				width = medium
			)
			in_place_customer_orders
			(
				type = picklist	
				displayname = "In Place Customer Orders"
				values  = In_Place_Customer_Orders.ID
    			displayformat = [ID]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			online_customer_orders
			(
				type = picklist	
				displayname = "Online Customer Orders"
				values  = Online_Customer_Orders.ID
    			displayformat = [ID]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			suppliers_orders
			(
				type = picklist	
				displayname = "Suppliers Orders"
				values  = Suppliers_Orders.ID
    			displayformat = [ID]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Cancel1
					(
   						type = reset
   						displayname = "Cancel"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form In_Place_Customer_Orders
		{
			displayname = "In Place Customer Orders"
			success message = "Order Added Successfully!"
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			order_date_time
			(
    			type = datetime
				displayname = "Order Date-Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			order_received_date_time
			(
    			type = datetime
				displayname = "Received Date-Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have customer_phone
			(
				type = picklist	
				displayname = "Phone"
				values  = Customers.ID
    			bidirectional = orders_history
    			displayformat = [customer_phone + " - " + customer_name.last_name]
				allow new entries
				[
					displayname = "Add New Customer"
				]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = large
			)
			must have customer_name
			(
    			type = name
				displayname = "Name"
     			prefix
     			(
	     			 type = prefix
	     			 displayname ="Prefix"
	     			 visibility = false
	     			 value = {"Mr.","Mrs.","Ms."}
     			) 
     			first_name
     			(
	     			 type = first_name
	     			 displayname ="First Name"
     			) 
     			last_name
     			(
	     			 type = last_name
	     			 displayname ="Last Name"
     			) 
     			suffix
     			(
	     			 type = suffix
	     			 displayname ="Suffix"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			customer_address
			(
    			type = address
				displayname = "Address"
     			capture_coordinates = true
     			adjust_using_map = false
     			address_line_1
     			(
	     			  type = address_line_1
	     			  displayname = "Address"
     			) 
     			address_line_2
     			(
	     			  type = address_line_2
	     			  displayname = "Address Line 2"
	     			 visibility = false
     			) 
     			district_city
     			(
	     			  type = district_city
	     			  displayname = "City"
     			) 
     			state_province
     			(
	     			  type = state_province
	     			  displayname = "State / Province"
	     			 visibility = false
     			) 
     			postal_Code
     			(
	     			  type = postal_Code
	     			  displayname = "Postal Code"
	     			 visibility = false
     			) 
     			country
     			(
	     			  type = country
	     			  displayname = "Country"
	     			 visibility = false
     			) 
     			latitude
     			(
	     			  type = latitude
	     			  displayname = "latitude"
	     			 visibility = false
     			) 
     			longitude
     			(
	     			  type = longitude
	     			  displayname = "longitude"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			order_received
			(
    			type = checkbox
				displayname = "Order received"
				initial value = false
				private = true
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have order_details
			(
				type = grid
				displayname = "Order Details"
				values  = In_Place_Customer_Orders_Details.ID
    			bidirectional = order_number
	 			row = 2
	 			column = 1   
				width = medium
			)
			summary
			(
				type = section
				displayname = "Summary"
				visibility = true
	 			row = 3
	 			column = 0   
				width = medium
			)
			discount
			(
    			type = percentage
				displayname = "Discount"
				initial value = 0%
				decimalplace = 0
	 			row = 3
	 			column = 1   
				width = medium
			)
			delivery
			(
    			type = checkbox
				displayname = "Delivery"
				initial value = false
	 			row = 3
	 			column = 1   
				width = medium
			)
			credit_card_number
			(
				type = number
				displayname = "Credit Card Number"
				maxchar = 16
    			description
    			[
    				type = help_text
    			 	message = "Credit cart must contain 16 digits number only"
    			]
	 			row = 3
	 			column = 1   
				width = large
			)
			total_order_price
			(
				displayname = "Total Order Price"
				type = ILS
				format = commadotwestern
	 			row = 3
	 			column = 1   
				width = medium
			)
	
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Cancel1
					(
   						type = reset
   						displayname = "Cancel"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form In_Place_Customer_Orders_Details
		{
			displayname = "In Place Customer Orders Details"
			success message = "Data Added Successfully!"
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			menu_item
			(
				type = picklist	
				displayname = "Menu Item"
				values  = Menu.ID
    			displayformat = [item_name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			quantity
			(
				type = number
				displayname = "Quantity"
	 			row = 1
	 			column = 1   
				width = medium
			)
			unit_price
			(
				displayname = "Unit Price"
				type = ILS
				format = commadotwestern
	 			row = 1
	 			column = 1   
				width = medium
			)
			total_price_per_item
			(
				displayname = "Total Price Per Item"
				type = ILS
				format = commadotwestern
	 			row = 1
	 			column = 1   
				width = medium
			)
			order_number
			(
				type = picklist	
				displayname = "Order Number"
				values  = In_Place_Customer_Orders.ID
    			bidirectional = order_details
    			displayformat = [ID]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Inventory
		{
			success message = "Product Added Successfully!"
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have unique product_name
			(
    			type = text
				displayname = "Product Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			current_stock
			(
				type = decimal
				displayname = "Current Stock"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have saftey_stock
			(
				type = decimal
				displayname = "Saftey Stock"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have unit_of_measure
			(
				type = picklist
				displayname = "Unit Of Measure"
				maxchar = 100
				values = {"Kg","Liter","Unit"}
	 			row = 1
	 			column = 1   
				width = medium
			)
			shortage
			(
    			type = formula
				displayname = "Shortage"
				value =  if(current_stock <= saftey_stock,"Shortage","surplus")
				visibility = false
				display type = text
				format = plaintext
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have suppliers
			(
				type = grid
				displayname = "Suppliers"
				values  = Suppliers_Products.ID
    			bidirectional = inventory
	 			row = 2
	 			column = 1   
				width = medium
			)
	
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Cancel1
					(
   						type = reset
   						displayname = "Cancel"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Menu
		{
			success message = "Menu Item Added Successfully"
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			item_image
			(
    			type = image
				displayname = "Image"
				source  = file
				aspect ratio = original
				camera = primary
				show gallery = true
				switch camera = true
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have item_name
			(
    			type = text
				displayname = "Item Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have item_price
			(
				displayname = "Price"
				type = ILS
				format = commadotwestern
	 			row = 1
	 			column = 1   
				width = medium
			)
			item_description
			(
    			type = richtext
				displayname = "Description"
				height = 200px
				toolbar = enable
				[
					style, font-color, background-color, alignment, link, table, bullets-and-numbering, 
					font-size : {1, 2, 3, 4, 5, 6, 7},
					font-family : {"Serif", "Arimo", "Ptmono", "Heuristica", "OpenSans", "Tinos", "Lato", "DejaVuSans", "ComicNeue", "EBGaramond", "RobotoCondensed", "ArchivoBlack", "Carlito", "Barlow", "Comfortaa", "Montserrat", "Nunito", "Poppins", "Quicksand", "Raleway", "Rubik", "SourceSansPro"}
				]
	 			row = 1
	 			column = 1   
				width = medium
			)
			available
			(
    			type = checkbox
				displayname = "Available"
				initial value = true
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have recipe
			(
				type = grid
				displayname = "Recipe"
				values  = Recipes.ID
    			bidirectional = item
	 			row = 2
	 			column = 1   
				width = medium
			)
	
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Cancel1
					(
   						type = reset
   						displayname = "Cancel"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Online_Customer_Orders
		{
			displayname = "Online Customer Orders"
			success message = "Order Added Successfully!"
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			order_date_time
			(
    			type = datetime
				displayname = "Order Date-Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			received_order_date_time
			(
    			type = datetime
				displayname = "Received Date-Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have customer_name
			(
    			type = name
				displayname = "Name"
     			prefix
     			(
	     			 type = prefix
	     			 displayname ="Prefix"
	     			 visibility = false
	     			 value = {"Mr.","Mrs.","Ms."}
     			) 
     			first_name
     			(
	     			 type = first_name
	     			 displayname ="First Name"
     			) 
     			last_name
     			(
	     			 type = last_name
	     			 displayname ="Last Name"
     			) 
     			suffix
     			(
	     			 type = suffix
	     			 displayname ="Suffix"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			must have customer_email
			(
    			type = email
				displayname = "Email"
				maxchar = 80
	 			row = 1
	 			column = 1   
				width = large
				personal data = true
			)
			must have customer_phone
			(
    			type = phonenumber
				displayname = "Phone"
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			customer_address
			(
    			type = address
				displayname = "Address"
     			capture_coordinates = true
     			adjust_using_map = false
     			address_line_1
     			(
	     			  type = address_line_1
	     			  displayname = "Address"
     			) 
     			address_line_2
     			(
	     			  type = address_line_2
	     			  displayname = "Address Line 2"
	     			 visibility = false
     			) 
     			district_city
     			(
	     			  type = district_city
	     			  displayname = "City"
     			) 
     			state_province
     			(
	     			  type = state_province
	     			  displayname = "State / Province"
	     			 visibility = false
     			) 
     			postal_Code
     			(
	     			  type = postal_Code
	     			  displayname = "Postal Code"
	     			 visibility = false
     			) 
     			country
     			(
	     			  type = country
	     			  displayname = "Country"
	     			 visibility = false
     			) 
     			latitude
     			(
	     			  type = latitude
	     			  displayname = "latitude"
	     			 visibility = false
     			) 
     			longitude
     			(
	     			  type = longitude
	     			  displayname = "longitude"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			order_received_box_online
			(
    			type = checkbox
				displayname = "Order received"
				initial value = false
				private = true
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have order_details
			(
				type = grid
				displayname = "Order Details"
				values  = Online_Customer_Orders_Details.ID
    			bidirectional = order_number
	 			row = 2
	 			column = 1   
				width = medium
			)
			Summary
			(
				type = section
				visibility = true
	 			row = 3
	 			column = 0   
				width = medium
			)
			delivery
			(
    			type = checkbox
				displayname = "Delivery"
				initial value = false
	 			row = 3
	 			column = 1   
				width = medium
			)
			must have credit_card_number
			(
				type = number
				displayname = "Credit Card Number"
				maxchar = 16
	 			row = 3
	 			column = 1   
				width = large
			)
			total_order_price
			(
				displayname = "Total Order Price"
				type = ILS
				format = commadotwestern
	 			row = 3
	 			column = 1   
				width = medium
			)
	
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Cancel1
					(
   						type = reset
   						displayname = "Cancel"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Online_Customer_Orders_Details
		{
			displayname = "Online Customer Orders Details"
			success message = "Data Added Successfully!"
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			menu_item
			(
				type = picklist	
				displayname = "Menu Item"
				values  = Menu.ID
    			displayformat = [item_name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			quantity
			(
				type = number
				displayname = "Quantity"
	 			row = 1
	 			column = 1   
				width = medium
			)
			unit_price
			(
				displayname = "Unit Price"
				type = ILS
				format = commadotwestern
	 			row = 1
	 			column = 1   
				width = medium
			)
			total_price_per_item
			(
				displayname = "Total Price Per Item"
				type = ILS
				format = commadotwestern
	 			row = 1
	 			column = 1   
				width = medium
			)
			order_number
			(
				type = picklist	
				displayname = "Order Number"
				values  = Online_Customer_Orders.ID
    			bidirectional = order_details
    			displayformat = [ID]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Recipes
		{
			success message = "Recipe Added Successfully"
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			product
			(
				type = picklist	
				displayname = "Product"
				values  = Inventory.ID
    			displayformat = [product_name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			item
			(
				type = picklist	
				displayname = "Item"
				values  = Menu.ID
    			bidirectional = recipe
    			displayformat = [item_name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			quantity
			(
				type = decimal
				displayname = "Quantity"
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Shifts
		{
			success message = "Shift Added Successfully!"
			Section1
			(
				type = section
				displayname = "Section"
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have shift_date
			(
    			type = date
				displayname = "Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			weekday
			(
    			type = text
				displayname = "Weekday"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have shifts_type
			(
				type = radiobuttons	
				displayname = "Shifts Type"
				values  = Shifts_Types.ID
    			displayformat = [shift_type]
				layout = 3
	 			row = 1
	 			column = 1   
				width = medium
			)
			shift_start_time
			(
    			type = time
				displayname = "Start Time"
				timedisplayoptions = "hh:mm:ss" 
	 			row = 1
	 			column = 1   
				width = medium
			)
			shift_end_time
			(
    			type = time
				displayname = "End Time"
				timedisplayoptions = "hh:mm:ss" 
	 			row = 1
	 			column = 1   
				width = medium
			)
			cooks_needed_num
			(
				type = number
				displayname = "Cooks Needed Num"
	 			row = 1
	 			column = 2   
				width = medium
			)
			line_workers_needed_num
			(
				type = number
				displayname = "Line Workers Needed Num"
	 			row = 1
	 			column = 2   
				width = medium
			)
			delivery_driver_needed_num
			(
				type = number
				displayname = "Delivery Driver Needed Num"
	 			row = 1
	 			column = 2   
				width = medium
			)
			cleanings_needed_num
			(
				type = number
				displayname = "Cleanings Needed Num"
	 			row = 1
	 			column = 2   
				width = medium
			)
			must have shift_assigments
			(
				type = grid
				displayname = "Assigments"
				values  = Shifts_Assigments.ID
    			bidirectional = shift
	 			row = 2
	 			column = 1   
				width = medium
			)
	
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Cancel1
					(
   						type = reset
   						displayname = "Cancel"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Shifts_Assigments
		{
			displayname = "Shifts Assigments"
			success message = "Data Added Successfully!"
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			shift
			(
				type = picklist	
				displayname = "Shift"
				values  = Shifts.ID
    			bidirectional = shift_assigments
    			displayformat = [shift_date]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = large
			)
			employee
			(
				type = picklist	
				displayname = "Employee"
				values  = Employees[is_active == true].ID
    			bidirectional = shifts
    			displayformat = [" " + employee_name.first_name + " " + employee_name.last_name + "- " + employee_type]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = large
			)
			employee_type
			(
    			type = text
				displayname = "Type"
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Shifts_Types
		{
			displayname = "Shifts Types"
			success message = "Shift Type Added Successfully!"
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have shift_type
			(
    			type = text
				displayname = "Shift Type"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have start_time
			(
    			type = time
				displayname = "Start Time"
				timedisplayoptions = "hh:mm:ss" 
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have end_time
			(
    			type = time
				displayname = "End Time"
				timedisplayoptions = "hh:mm:ss" 
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have cooks_needed
			(
				type = number
				displayname = "Cooks Needed"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have line_workers_needed
			(
				type = number
				displayname = "Line Workers Needed"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have delivery_driver_needed
			(
				type = number
				displayname = "Delivery Driver Needed"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have cleanings_needed
			(
				type = number
				displayname = "Cleanings Needed"
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Cancel1
					(
   						type = reset
   						displayname = "Cancel"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Suppliers
		{
			success message = "Supplier Added Successfully!"
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have supplier_name
			(
    			type = text
				displayname = "Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			supplier_phone
			(
    			type = phonenumber
				displayname = "Phone"
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			supplier_email
			(
    			type = email
				displayname = "Email"
				maxchar = 80
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			supplier_address
			(
    			type = address
				displayname = "Address"
     			capture_coordinates = true
     			adjust_using_map = false
     			address_line_1
     			(
	     			  type = address_line_1
	     			  displayname = "Address"
     			) 
     			address_line_2
     			(
	     			  type = address_line_2
	     			  displayname = "Address Line 2"
	     			 visibility = false
     			) 
     			district_city
     			(
	     			  type = district_city
	     			  displayname = "City"
     			) 
     			state_province
     			(
	     			  type = state_province
	     			  displayname = "State / Province"
	     			 visibility = false
     			) 
     			postal_Code
     			(
	     			  type = postal_Code
	     			  displayname = "Postal Code"
	     			 visibility = false
     			) 
     			country
     			(
	     			  type = country
	     			  displayname = "Country"
	     			 visibility = false
     			) 
     			latitude
     			(
	     			  type = latitude
	     			  displayname = "latitude"
	     			 visibility = false
     			) 
     			longitude
     			(
	     			  type = longitude
	     			  displayname = "longitude"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			supplies_products
			(
				type = grid
				displayname = "Supplies Products"
				values  = Suppliers_Products.ID
    			bidirectional = supplier
	 			row = 2
	 			column = 1   
				width = medium
			)
	
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Cancel1
					(
   						type = reset
   						displayname = "Cancel"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Suppliers_Orders
		{
			displayname = "Suppliers Orders"
			success message = "Supplier Order Added Successfully!"
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have supplier
			(
				type = picklist	
				displayname = "Supplier"
				values  = Suppliers.ID
    			displayformat = [supplier_name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			order_date_time
			(
    			type = datetime
				displayname = "Order Date-Time"
				timedisplayoptions = "hh:mm"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			arrival_date_time
			(
    			type = datetime
				displayname = "Arrival Date-Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			order_received
			(
    			type = checkbox
				displayname = "Order Received"
				initial value = false
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have order_details
			(
				type = grid
				displayname = "Order Details"
				values  = Suppliers_Orders_Details.ID
    			bidirectional = suppliers_order_number
	 			row = 2
	 			column = 1   
				width = medium
			)
			summary
			(
				type = section
				displayname = "Summary"
				visibility = true
	 			row = 3
	 			column = 0   
				width = medium
			)
			total_order_price
			(
				displayname = "Total Order Price"
				type = ILS
				format = commadotwestern
	 			row = 3
	 			column = 1   
				width = medium
			)
	
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Cancel1
					(
   						type = reset
   						displayname = "Cancel"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Suppliers_Orders_Details
		{
			displayname = "Suppliers Orders Details"
			success message = "Data Added Successfully!"
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			supplier
			(
				type = picklist	
				displayname = "Supplier"
				values  = Suppliers.ID
    			displayformat = [supplier_name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			suppliers_order_number
			(
				type = picklist	
				displayname = "Suppliers Order Number"
				values  = Suppliers_Orders.ID
    			bidirectional = order_details
    			displayformat = [ID]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			product
			(
				type = picklist	
				displayname = "Product"
				values  = Inventory.ID
    			displayformat = [product_name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			unit_price
			(
				displayname = "Unit Price"
				type = ILS
				format = commadotwestern
	 			row = 1
	 			column = 1   
				width = medium
			)
			quantity
			(
				type = decimal
				displayname = "Quantity"
	 			row = 1
	 			column = 1   
				width = medium
			)
			total_price_per_product
			(
				displayname = "Total Price Per Product"
				type = ILS
				format = commadotwestern
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Suppliers_Products
		{
			displayname = "Suppliers-Products"
			success message = "Data Added Successfully!"
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have supplier
			(
				type = picklist	
				displayname = "Supplier"
				values  = Suppliers.ID
    			bidirectional = supplies_products
    			displayformat = [supplier_name]
				allow new entries
				[
					displayname = "Add New"
				]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			inventory
			(
				type = picklist	
				displayname = "Inventory"
				values  = Inventory.ID
    			bidirectional = suppliers
    			displayformat = [product_name]
				allow new entries
				[
					displayname = "Add New"
				]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have products_price
			(
				displayname = "Price"
				type = ILS
				format = commadotwestern
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	reports
	{
		default list All_Customers
		{
			displayName = "Customers"
			show all rows from Customers    
			(
				customer_name  as "Name"
	 			(
	      			displayformat = [first_name+""+prefix+""+last_name+""+suffix]
	 			)
				customer_phone as "Phone"
				(
					displayformat = plainnumber 
					linktodial = enable
				)
				customer_email as "Email"
				customer_address  as "Address"
	 			(
	      			displayformat = [address_line_1+""+address_line_2+""+district_city+""+state_province+""+postal_Code+""+country]
	      			enable = Link_to_Map,Show_As_Text
	 			)
				returning_customer as "Returning Customer"
				orders_history as "Orders History"
				(
					view = Orders_In_Place_Report
					field = orders_history.order_date_time + " - " + orders_history.total_order_price
				)
			)
		}
		default list Orders_In_Place_Report
		{
			displayName = "Orders In Place"
			show all rows from In_Place_Customer_Orders    
			(
				customer_address  as "Address"
	 			(
	      			displayformat = [address_line_1+""+district_city]
	      			enable = Link_to_Map,Show_As_Text
					width = 242px
	 			)
				order_date_time as "Order Date-Time"
				(
					width = 197px
				)
				delivery as "Delivery"
				(
					width = 99px
				)
				total_order_price as "Total Order Price"
				(
					width = 159px
				)
				discount as "Discount (%)"
				(
					width = 121px
				)
				customer_phone as "Phone"
				(
					width = 266px
				)
				customer_name  as "Name"
	 			(
	      			displayformat = [first_name+""+prefix+""+last_name+""+suffix]
					width = 184px
	 			)
				custom action "Order Received"
				(
	  			workflow = In_place_customer_order_r
				show action in edit record menu = true
				column header = "Order Received"
				condition = (order_received == false)
				confirmation before execution
				(
					message for individual record = "Has this order been received?"
					confirm button text = "Yes, update financial records"		
					cancel button text = "No"
				)
				)
				order_received as "Order received"
				order_received_date_time as "Received Date-Time"
				order_details as "Order Details"
				(
					field = order_details.menu_item + " " + order_details.quantity + " " + order_details.total_price_per_item
				)
				credit_card_number as "Credit Card Number"
			)
			sort by
			(
				order_date_time descending
			)
		}
		default list Customer_Orders_Details_In_Place_Report
		{
			displayName = "Customer Orders Details In Place"
			show all rows from In_Place_Customer_Orders_Details    
			(
				quantity as "Quantity"
				unit_price as "Unit Price"
				total_price_per_item as "Total Price Per Item"
				order_number as "Order Number"
				menu_item as "Menu Item"
			)
		}
		default list Customer_Orders_Online_Report
		{
			displayName = "Online Customer Orders Report"
			show all rows from Online_Customer_Orders    
			(
				customer_name  as "Name"
	 			(
	      			displayformat = [first_name+""+prefix+""+last_name+""+suffix]
	 			)
				customer_phone as "Phone"
				(
					displayformat = plainnumber 
					linktodial = enable
				)
				customer_address  as "Address"
	 			(
	      			displayformat = [address_line_1+""+address_line_2+""+district_city+""+state_province+""+postal_Code+""+country]
	      			enable = Link_to_Map,Show_As_Text
	 			)
				order_date_time as "Order Date-Time"
				delivery as "Delivery"
				total_order_price as "Total Order Price"
				order_received_box_online as "Order received"
				custom action "online customer order received"
				(
	  			workflow = online_customer_order_rec
				show action in edit record menu = true
				column header = "online customer order received"
				condition = (order_received_box_online == false)
				confirmation before execution
				(
					message for individual record = "Has this order been received?"
					confirm button text = "Yes, update financial records"		
					cancel button text = "No"
				)
				)
				customer_email as "Email"
				received_order_date_time as "Received Date-Time"
				order_details as "Order Details"
				(
					field = order_details.menu_item + " " + order_details.quantity + " " + order_details.total_price_per_item
				)
				credit_card_number as "Credit Card Number"
			)
		}
		default list Online_Customer_Orders_Details_Report
		{
			displayName = "Online Customer Orders Details"
			show all rows from Online_Customer_Orders_Details    
			(
				quantity as "Quantity"
				unit_price as "Unit Price"
				total_price_per_item as "Total Price Per Item"
				order_number as "Order Number"
				menu_item as "Menu Item"
			)
		}
		default list All_Inventories
		{
			displayName = "Inventory"
			show all rows from Inventory    
			(
				product_name as "Product Name"
				current_stock as "Current Stock"
				saftey_stock as "Saftey Stock"
				unit_of_measure as "Unit Of Measure"
				shortage as "Shortage"
			)
		}
		default list All_Menus
		{
			displayName = "Menu"
			show all rows from Menu    
			(
				item_name as "Item Name"
				item_image as "Image"
				item_description as "Description"
				item_price as "Price"
				available as "Available"
				recipe as "Recipe"
				(
					field = recipe.product + " " + recipe.quantity
				)
			)
		}
		default list All_Recipes
		{
			displayName = "All Recipes"
			show all rows from Recipes    
			(
				product as "Product"
				quantity as "Quantity"
				item as "Item"
			)
		}
		default list All_Suppliers
		{
			displayName = "Suppliers"
			show all rows from Suppliers    
			(
				supplier_name as "Name"
				supplier_phone as "Phone"
				(
					displayformat = plainnumber 
					linktodial = enable
				)
				supplier_email as "Email"
				supplier_address  as "Address"
	 			(
	      			displayformat = [address_line_1+""+address_line_2+""+district_city+""+state_province+""+postal_Code+""+country]
	      			enable = Link_to_Map,Show_As_Text
	 			)
				supplies_products as "Supplies Products"
				(
					field = supplies_products.inventory + " - " + supplies_products.products_price
				)
			)
		}
		default list Suppliers_Products_Report
		{
			displayName = "Suppliers-Products Report"
			show all rows from Suppliers_Products    
			(
				products_price as "Price"
				supplier as "Supplier"
				inventory as "Inventory"
				inventory.unit_of_measure as "Unit Of Measure"
			)
		}
		default list Suppliers_Orders_Report
		{
			displayName = "Suppliers Orders"
			show all rows from Suppliers_Orders    
			(
				supplier as "Supplier"
				order_date_time as "Order Date-Time"
				arrival_date_time as "Arrival Date-Time"
				total_order_price as "Total Order Price"
				custom action "Order Received"
				(
	  			workflow = Update_Inventory_from_Sup
				show action in edit record menu = true
				column header = "Order Received"
				condition = (order_received == false)
				confirmation before execution
				(
					message for individual record = "Has this order been received?"
					confirm button text = "Yes, Update Inventory"		
					cancel button text = "No"
				)
				)
				order_received as "Order Received"
				(
						displaytrue = "true"
						displayfalse = "false"
				)
				custom action "Duplicate Order"
				(
	  			workflow = Duplicate_Supplier_Order
				show action in edit record menu = true
				column header = "Duplicate Order"
				confirmation before execution
				(
					message for individual record = "Are you sure you want to duplicate this order?"
					confirm button text = "Yes"		
					cancel button text = "No"
				)
				)
				order_details.supplier as "Order Details"
			)
		}
		default list Suppliers_Orders_Details_Report
		{
			displayName = "Suppliers Orders Details Report"
			show all rows from Suppliers_Orders_Details    
			(
				supplier as "Supplier"
				product as "Product"
				quantity as "Quantity"
				unit_price as "Unit Price"
				total_price_per_product as "Total Price Per Product"
				suppliers_order_number as "Suppliers Order Number"
			)
		}
		default list All_Employees
		{
			displayName = "Employees"
			show all rows from Employees    
			(
				employee_name  as "Name"
	 			(
	      			displayformat = [first_name+""+prefix+""+last_name+""+suffix]
	 			)
				employee_phone as "Phone"
				(
					displayformat = plainnumber 
					linktodial = enable
				)
				employee_type as "Type"
				hourly_rate as "Hourly Rate"
				is_active as "Active"
				employee_email as "Email"
				shifts.shift as "Shifts"
			)
		}
		default list Shifts_Types_Report
		{
			displayName = "Shifts Types"
			show all rows from Shifts_Types    
			(
				shift_type as "Shift Type"
				start_time as "Start Time"
				end_time as "End Time"
				cooks_needed as "Cooks Needed"
				line_workers_needed as "Line Workers Needed"
				cleanings_needed as "Cleanings Needed"
				delivery_driver_needed as "Delivery Driver Needed"
			)
		}
		default list All_Shifts
		{
			displayName = "Shifts"
			show all rows from Shifts    
			(
				shift_date as "Date"
				shifts_type as "Shifts Type"
				weekday as "Weekday"
				shift_start_time as "Start Time"
				shift_end_time as "End Time"
				shift_assigments as "Assigments"
				(
					view = Shifts_Assigments_Report
					field = shift_assigments.employee + ": " + shift_assigments.employee_type
				)
				cooks_needed_num as "Cooks Needed Num"
				line_workers_needed_num as "Line Workers Needed Num"
				cleanings_needed_num as "Cleanings Needed Num"
				delivery_driver_needed_num as "Delivery Driver Needed Num"
			)
			filters
			(
				shifts_type
				"this week"  :  shift_date in this week
				"next week"  :  shift_date in next week
				"last week"  :  shift_date in last week
			)
		}
		default list Shifts_Assigments_Report
		{
			displayName = "Shifts Assigments Report"
			show all rows from Shifts_Assigments    
			(
				shift as "Shift"
				employee as "Employee"
				shift.shifts_type as "Shifts Type"
				employee.employee_type as "Type"
				employee_type as "Type"
			)
		}
		default list Employees_Absences_Report
		{
			displayName = "Employees Absences"
			show all rows from Employees_Absences    
			(
				employee as "Employee"
				reason as "Reason"
				absence_date as "Date"
				shifts_types as "Shifts Types"
			)
		}
		default list All_Finance_Records
		{
			displayName = "Finance Records"
			show all rows from Finance_Records    
			(
				record_type_text as "Record Type Description"
				record_date_time as "Date-Time"
				amount as "Amount"
				(
					display = total,average,min,max	
				)
				in_place_customer_orders as "In Place Customer Orders"
				online_customer_orders as "Online Customer Orders"
				suppliers_orders as "Suppliers Orders"
				record_type_dropdown as "Record Type"
			)
		}
		list Low_Stock_Items
		{
			displayName = "Low Stock Items"
			show all rows from Inventory  [shortage == "Shortage"]  
			(
				product_name as "Product Name"
				current_stock as "Current Stock"
				saftey_stock as "Saftey Stock"
				unit_of_measure as "Unit Of Measure"
			)
		}
		map Customers_Map
		{
			displayName = "Customers Map"
			show all rows from Customers    
			(
				customer_name  as "Name"
	 			(
	      			displayformat = [first_name+""+prefix+""+last_name+""+suffix]
	 			)
				customer_phone as "Phone"
				(
					displayformat = plainnumber 
					linktodial = enable
				)
				customer_email as "Email"
				customer_address  as "Address"
	 			(
	      			displayformat = [address_line_1+""+address_line_2+""+district_city+""+state_province+""+postal_Code+""+country]
	      			enable = Link_to_Map,Show_As_Text
	 			)
				returning_customer as "Returning Customer"
			)
			options
			(
	 			display field = customer_address
	 	 		radius = 100 Miles
	 		)
		}
		calendar Shifts_Calendar1
		{
			displayName = "Shifts Calendar"
			show all rows from Shifts    
			(
				shift_start_time as "Start Time"
				shifts_type as "Shifts Type"
				(
					view = Shifts_Types_Report
				)
				shift_end_time as "End Time"
				shift_date as "Date"
				shift_assigments as "Assigments"
				(
					field = shift_assigments.employee + " - " + shift_assigments.employee_type
				)
			)
			filters
			(
				shift_date
			)
			options
			(
				display type = month
				week start day = sunday
				display field = shifts_type
				start date = shift_date
				default date 
				(
	    			day   = Today
	    			month = Currentmonth
	    			year  = Currentyear
				)
			)
		}
		spreadsheet Menu_Report_For_Customers1
		{
			displayName = "Menu For Customers"
			show all rows from Menu    
			(
				item_image as "Image"
				item_name as "Item Name"
				item_price as "Price"
				available as "Available"
				item_description as "Description"
			)
			filters
			(
				"Pizzas"  :  item_name.contains("Pizza") && !item_name.contains("Dessert")
				"Desserts"  :  item_name.contains("Dessert")
				"Salads"  :  item_name.contains("Salad")
				"Drinks"  :  !item_name.contains("Pizza") && !item_name.contains("Salad")
			)
		}
		pivotchart financial_dashboard
		{ 
			displayname = "financial dashboard"
						report properties
			(
				records displayed = all_records
				allow export = false
				allow drilldown and view underlying data = false
		
			)

			based on Autoview_1754415674027_Finance_Records
				show all rows from Finance_Records
				(
			record_date_time  as "Date-Time"
			record_type_text  as "Record Type Description"
			amount  as "Amount"
			in_place_customer_orders  as "In Place Customer Orders"
			online_customer_orders  as "Online Customer Orders"
			suppliers_orders  as "Suppliers Orders"
			record_type_dropdown  as "Record Type1"
				)
		}
		pivotchart most_wanted_item
		{ 
			displayname = "most wanted item"
						report properties
			(
				records displayed = all_records
				allow export = false
				allow drilldown and view underlying data = false
		
			)

			based on Autoview_1755452511808_Online_Customer_Orders_De
				show all rows from Online_Customer_Orders_Details
				(
			menu_item  as "Menu Item"
			quantity  as "Quantity"
			unit_price  as "Unit Price"
			total_price_per_item  as "Total Price Per Item"
			order_number  as "Order Number"
				)
		}
	}
	pages
	{
		page Management_Dashboard(float earnings, int non_returning_customers, int returning_customers)
		{
			displayname = "Management Dashboard"
			Content="<zml    \t\t\n\t\t\n\t\t\n\t\t\n\t\t\n>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width='100%'\n   \t>\n\t<panel elementName='Panel'\n \n >\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\tpadding = '20px'\n\tbgColor = '#FFFFFF'\n\n\t\twidth = '100%'\n\t\thAlign = 'center'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t\n>\n\t<image  \n\t\tmarginRight = '7px' \n\n\tcolor = '#FFFFFF'\n\tbgColor = '#7CCB8D'\n\twidth = '52px'\n\theight = '52px'\n\ttype = 'icon'\n\tvalue = 'business-gold'\n\tsize = '24px'\n\tcornerRadius = '26px'\n\ticonType = 'solid'\n\/>\n<\/pc><pc \n\t\n\t\thAlign = 'left'\n>\n\t<pr \n\t>\n\t<pc \n\t\n\t\thAlign = 'left'\n>\n\t<text \n\n\tmargin = '0px'\n\tpadding = '0px'\n\tcolor = '#000000'\n\tsize = '16px'\n\ttype = 'Text'\n\n\tbgColor = 'transparent'\n        bgColorType = 'noFill'\n\tcornerRadius = '0px'\n\n\n\n\n\n    borderColor = '#000000'\n    borderWidth = '0px'\n\n\t  value = 'Total Profits'\n>\n<\/text>\n\n<\/pc>\n<\/pr><pr \n\t>\n\t<pc \n\t\n\t\thAlign = 'left'\n>\n\t<text \n\n\tmarginLeft = '0px'\n\tmarginRight = '0px' \n\tmarginBottom = '0px'\n\tmarginTop = '2px'\n\tpadding = '0px'\n\tcolor = '#7CCB8D'\n\tsize = '36px'\n\tbold = 'true' \n\ttype = 'variable'\n\n\tbgColor = 'transparent'\n        bgColorType = 'noFill'\n\tcornerRadius = '0px'\n\n\n\tdisplayType = 'actual'\n\tdecimalPlaces = '0'\n\tthousandsSeperator = 'LOCALE'\n\tdecimalSeperator = 'DOT'\n\tnumberScale = 'none'\n\n\n\n    borderColor = '#09B24D'\n    borderWidth = '0px'\n\n\t  value = '${earnings}'\n>\n<\/text>\n\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width='50%'\n   \t>\n\t<panel elementName='Panel 5'\n \n >\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\tpadding = '20px'\n\tbgColor = '#FFFFFF'\n\n\t\twidth = '100%'\n\t\thAlign = 'center'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t\n>\n\t<image  \n\t\tmarginLeft = '0px'\n\tmarginRight = '7px' \n\tmarginBottom = '0px'\n\tmarginTop = '0px'\n\n    borderColor = '#FFFFFF'\n    borderWidth = '0px'\n\tcolor = '#FFFFFF'\n\tbgColor = '#7CCB8D'\n\twidth = '52px'\n\theight = '52px'\n\ttype = 'icon'\n\tvalue = 'food-pizza-slice'\n\tsize = '24px'\n\tcornerRadius = '26px'\n\ticonType = 'outline'\n\/>\n<\/pc><pc \n\t\n\t\thAlign = 'left'\n>\n\t<pr \n\t>\n\t<pc \n\t\n\t\thAlign = 'left'\n>\n\t<text \n\n\tmargin = '0px'\n\tpadding = '0px'\n\tcolor = '#000000'\n\tsize = '16px'\n\ttype = 'Text'\n\n\tbgColor = 'transparent'\n        bgColorType = 'noFill'\n\tcornerRadius = '0px'\n\n\n\n\n\n    borderColor = '#000000'\n    borderWidth = '0px'\n\n\t  value = 'Total Customer Orders'\n>\n<\/text>\n\n<\/pc>\n<\/pr><pr \n\t>\n\t<pc \n\t\n\t\thAlign = 'left'\n>\n\t<text \n\n\tmarginLeft = '0px'\n\tmarginRight = '0px' \n\tmarginBottom = '0px'\n\tmarginTop = '2px'\n\tpadding = '0px'\n\tcolor = '#7CCB8D'\n\tsize = '28px'\n\tbold = 'true' \n\ttype = 'Form Data'\n\n\tbgColor = 'transparent'\n        bgColorType = 'noFill'\n\tcornerRadius = '0px'\n\n\n\tdisplayType = 'actual'\n\tdecimalPlaces = '0'\n\tthousandsSeperator = 'LOCALE'\n\tdecimalSeperator = 'DOT'\n\tnumberScale = 'none'\n\n\n\n    borderColor = '#09B24D'\n    borderWidth = '0px'\n\n\t\tcriteria = 'record_type_dropdown == &quot;Customer order - in place&quot; || record_type_dropdown == &quot;Customer order - online&quot;'\n\t  value = 'thisapp.Finance_Records.amount.sum'\n>\n<\/text>\n\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column><column\n   \t\t width='50%'\n   \t>\n\t<panel elementName='Panel 1'\n \n >\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\tpadding = '20px'\n\tbgColor = '#FFFFFF'\n\n\t\twidth = '100%'\n\t\thAlign = 'center'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t\n>\n\t<image  \n\t\tmarginLeft = '0px'\n\tmarginRight = '7px' \n\tmarginBottom = '0px'\n\tmarginTop = '0px'\n\n    borderColor = '#FFFFFF'\n    borderWidth = '0px'\n\tcolor = '#000000'\n\tbgColor = '#FF8B82'\n\twidth = '52px'\n\theight = '52px'\n\ttype = 'icon'\n\tvalue = 'files-money'\n\tsize = '24px'\n\tcornerRadius = '26px'\n\ticonType = 'outline'\n\/>\n<\/pc><pc \n\t\n\t\thAlign = 'left'\n>\n\t<pr \n\t>\n\t<pc \n\t\n\t\thAlign = 'left'\n>\n\t<text \n\n\tmargin = '0px'\n\tpadding = '0px'\n\tcolor = '#000000'\n\tsize = '16px'\n\ttype = 'Text'\n\n\tbgColor = 'transparent'\n        bgColorType = 'noFill'\n\tcornerRadius = '0px'\n\n\n\n\n\n    borderColor = '#000000'\n    borderWidth = '0px'\n\n\t  value = 'Total expanses'\n>\n<\/text>\n\n<\/pc>\n<\/pr><pr \n\t>\n\t<pc \n\t\n\t\thAlign = 'left'\n>\n\t<text \n\n\tmarginLeft = '0px'\n\tmarginRight = '0px' \n\tmarginBottom = '0px'\n\tmarginTop = '2px'\n\tpadding = '0px'\n\tcolor = '#FF8B82'\n\tsize = '28px'\n\tbold = 'true' \n\ttype = 'Form Data'\n\n\tbgColor = 'transparent'\n        bgColorType = 'noFill'\n\tcornerRadius = '0px'\n\n\n\tdisplayType = 'actual'\n\tdecimalPlaces = '0'\n\tthousandsSeperator = 'LOCALE'\n\tdecimalSeperator = 'DOT'\n\tnumberScale = 'none'\n\n\n\n    borderColor = '#CB3B23'\n    borderWidth = '0px'\n\n\t\tcriteria = 'record_type_dropdown == &quot;Payroll&quot; || record_type_dropdown == &quot;Supplier order&quot;'\n\t  value = 'thisapp.Finance_Records.amount.sum'\n>\n<\/text>\n\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width='25%'\n   \t>\n\t<panel elementName='Panel 6'\n \n >\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\tpadding = '20px'\n\tbgColor = '#FFFFFF'\n\n\t\twidth = '100%'\n\t\thAlign = 'center'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t\n>\n\t<image  \n\t\tmarginLeft = '0px'\n\tmarginRight = '7px' \n\tmarginBottom = '0px'\n\tmarginTop = '0px'\n\n    borderColor = '#FFFFFF'\n    borderWidth = '0px'\n\tcolor = '#FFFFFF'\n\tbgColor = '#7CCB8D'\n\twidth = '52px'\n\theight = '52px'\n\ttype = 'icon'\n\tvalue = 'shopping-mobile-cart'\n\tsize = '24px'\n\tcornerRadius = '26px'\n\ticonType = 'outline'\n\/>\n<\/pc><pc \n\t\n\t\thAlign = 'left'\n>\n\t<pr \n\t>\n\t<pc \n\t\n\t\thAlign = 'left'\n>\n\t<text \n\n\tmargin = '0px'\n\tpadding = '0px'\n\tcolor = '#000000'\n\tsize = '16px'\n\ttype = 'Text'\n\n\tbgColor = 'transparent'\n        bgColorType = 'noFill'\n\tcornerRadius = '0px'\n\n\n\n\n\n    borderColor = '#000000'\n    borderWidth = '0px'\n\n\t  value = 'Total Online Orders Income'\n>\n<\/text>\n\n<\/pc>\n<\/pr><pr \n\t>\n\t<pc \n\t\n\t\thAlign = 'left'\n>\n\t<text \n\n\tmarginLeft = '0px'\n\tmarginRight = '0px' \n\tmarginBottom = '0px'\n\tmarginTop = '2px'\n\tpadding = '0px'\n\tcolor = '#7CCB8D'\n\tsize = '28px'\n\tbold = 'true' \n\ttype = 'Form Data'\n\n\tbgColor = 'transparent'\n        bgColorType = 'noFill'\n\tcornerRadius = '0px'\n\n\n\tdisplayType = 'actual'\n\tdecimalPlaces = '0'\n\tthousandsSeperator = 'LOCALE'\n\tdecimalSeperator = 'DOT'\n\tnumberScale = 'none'\n\n\n\n    borderColor = '#09B24D'\n    borderWidth = '0px'\n\n\t\tcriteria = 'record_type_dropdown == &quot;Customer order - online&quot;'\n\t  value = 'thisapp.Finance_Records.amount.sum'\n>\n<\/text>\n\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column><column\n   \t\t width='25%'\n   \t>\n\t<panel elementName='Panel 7'\n \n >\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\tpadding = '20px'\n\tbgColor = '#FFFFFF'\n\n\t\twidth = '100%'\n\t\thAlign = 'center'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t\n>\n\t<image  \n\t\tmarginLeft = '0px'\n\tmarginRight = '7px' \n\tmarginBottom = '0px'\n\tmarginTop = '0px'\n\n    borderColor = '#FFFFFF'\n    borderWidth = '0px'\n\tcolor = '#FFFFFF'\n\tbgColor = '#7CCB8D'\n\twidth = '51.9978px'\n\theight = '51.9978px'\n\ttype = 'icon'\n\tvalue = 'furniture-table'\n\tsize = '24px'\n\tcornerRadius = '26px'\n\ticonType = 'outline'\n\/>\n<\/pc><pc \n\t\n\t\thAlign = 'left'\n>\n\t<pr \n\t>\n\t<pc \n\t\n\t\thAlign = 'left'\n>\n\t<text \n\n\tmargin = '0px'\n\tpadding = '0px'\n\tcolor = '#000000'\n\tsize = '16px'\n\ttype = 'Text'\n\n\tbgColor = 'transparent'\n        bgColorType = 'noFill'\n\tcornerRadius = '0px'\n\n\n\n\n\n    borderColor = '#000000'\n    borderWidth = '0px'\n\n\t  value = 'Total In-Place Orders Income'\n>\n<\/text>\n\n<\/pc>\n<\/pr><pr \n\t>\n\t<pc \n\t\n\t\thAlign = 'left'\n>\n\t<text \n\n\tmarginLeft = '0px'\n\tmarginRight = '0px' \n\tmarginBottom = '0px'\n\tmarginTop = '2px'\n\tpadding = '0px'\n\tcolor = '#7CCB8D'\n\tsize = '28px'\n\tbold = 'true' \n\ttype = 'Form Data'\n\n\tbgColor = 'transparent'\n        bgColorType = 'noFill'\n\tcornerRadius = '0px'\n\n\n\tdisplayType = 'actual'\n\tdecimalPlaces = '0'\n\tthousandsSeperator = 'LOCALE'\n\tdecimalSeperator = 'DOT'\n\tnumberScale = 'none'\n\n\n\n    borderColor = '#09B24D'\n    borderWidth = '0px'\n\n\t\tcriteria = 'record_type_dropdown == &quot;Customer order - in place&quot;'\n\t  value = 'thisapp.Finance_Records.amount.sum'\n>\n<\/text>\n\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column><column\n   \t\t width='25%'\n   \t>\n\t<panel elementName='Panel 3'\n \n >\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\tpadding = '20px'\n\tbgColor = '#FFFFFF'\n\n\t\twidth = '100%'\n\t\thAlign = 'center'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t\n>\n\t<image  \n\t\tmarginLeft = '0px'\n\tmarginRight = '7px' \n\tmarginBottom = '0px'\n\tmarginTop = '0px'\n\n    borderColor = '#FFFFFF'\n    borderWidth = '0px'\n\tcolor = '#000000'\n\tbgColor = '#FF8B82'\n\twidth = '52px'\n\theight = '52px'\n\ttype = 'icon'\n\tvalue = 'business-payment'\n\tsize = '24px'\n\tcornerRadius = '26px'\n\ticonType = 'outline'\n\/>\n<\/pc><pc \n\t\n\t\thAlign = 'left'\n>\n\t<pr \n\t>\n\t<pc \n\t\n\t\thAlign = 'left'\n>\n\t<text \n\n\tmargin = '0px'\n\tpadding = '0px'\n\tcolor = '#000000'\n\tsize = '16px'\n\ttype = 'Text'\n\n\tbgColor = 'transparent'\n        bgColorType = 'noFill'\n\tcornerRadius = '0px'\n\n\n\n\n\n    borderColor = '#000000'\n    borderWidth = '0px'\n\n\t  value = 'Total Payroll'\n>\n<\/text>\n\n<\/pc>\n<\/pr><pr \n\t>\n\t<pc \n\t\n\t\thAlign = 'left'\n>\n\t<text \n\n\tmarginLeft = '0px'\n\tmarginRight = '0px' \n\tmarginBottom = '0px'\n\tmarginTop = '2px'\n\tpadding = '0px'\n\tcolor = '#FF8B82'\n\tsize = '28px'\n\tbold = 'true' \n\ttype = 'Form Data'\n\n\tbgColor = 'transparent'\n        bgColorType = 'noFill'\n\tcornerRadius = '0px'\n\n\n\tdisplayType = 'actual'\n\tdecimalPlaces = '0'\n\tthousandsSeperator = 'LOCALE'\n\tdecimalSeperator = 'DOT'\n\tnumberScale = 'none'\n\n\n\n    borderColor = '#CB3B23'\n    borderWidth = '0px'\n\n\t\tcriteria = 'record_type_dropdown == &quot;Payroll&quot;'\n\t  value = 'thisapp.Finance_Records.amount.sum'\n>\n<\/text>\n\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column><column\n   \t\t width='25%'\n   \t>\n\t<panel elementName='Panel 4'\n \n >\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\tpadding = '20px'\n\tbgColor = '#FFFFFF'\n\n\t\twidth = '100%'\n\t\thAlign = 'center'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t\n>\n\t<image  \n\t\tmarginLeft = '0px'\n\tmarginRight = '7px' \n\tmarginBottom = '0px'\n\tmarginTop = '0px'\n\n    borderColor = '#FFFFFF'\n    borderWidth = '0px'\n\tcolor = '#000000'\n\tbgColor = '#FF8B82'\n\twidth = '52px'\n\theight = '52px'\n\ttype = 'icon'\n\tvalue = 'shopping-delivery-track'\n\tsize = '24px'\n\tcornerRadius = '26px'\n\ticonType = 'outline'\n\/>\n<\/pc><pc \n\t\n\t\thAlign = 'left'\n>\n\t<pr \n\t>\n\t<pc \n\t\n\t\thAlign = 'left'\n>\n\t<text \n\n\tmargin = '0px'\n\tpadding = '0px'\n\tcolor = '#000000'\n\tsize = '16px'\n\ttype = 'Text'\n\n\tbgColor = 'transparent'\n        bgColorType = 'noFill'\n\tcornerRadius = '0px'\n\n\n\n\n\n    borderColor = '#000000'\n    borderWidth = '0px'\n\n\t  value = 'Total Supplier Orders'\n>\n<\/text>\n\n<\/pc>\n<\/pr><pr \n\t>\n\t<pc \n\t\n\t\thAlign = 'left'\n>\n\t<text \n\n\tmarginLeft = '0px'\n\tmarginRight = '0px' \n\tmarginBottom = '0px'\n\tmarginTop = '2px'\n\tpadding = '0px'\n\tcolor = '#FF8B82'\n\tsize = '28px'\n\tbold = 'true' \n\ttype = 'Form Data'\n\n\tbgColor = 'transparent'\n        bgColorType = 'noFill'\n\tcornerRadius = '0px'\n\n\n\tdisplayType = 'actual'\n\tdecimalPlaces = '0'\n\tthousandsSeperator = 'LOCALE'\n\tdecimalSeperator = 'DOT'\n\tnumberScale = 'none'\n\n\n\n    borderColor = '#CB3B23'\n    borderWidth = '0px'\n\n\t\tcriteria = 'record_type_dropdown == &quot;Supplier order&quot;'\n\t  value = 'thisapp.Finance_Records.amount.sum'\n>\n<\/text>\n\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width='50%'\n   \t>\n\t<report \n\telementName='Report 3'\n\n\t\tappLinkName = 'thisapp'\n\t\tlinkName = 'Low_Stock_Items'\n\t\n\t\tiszreport = 'false'\n\t\t\t\t\tzc_AddRec = 'false'\n\t\t\t\t\tzc_EditRec = 'false'\n\t\t\t\t\tzc_DelRec = 'false'\n\t\t\t\t\tzc_DuplRec = 'false'\n\t\t\t\t\tzc_EditBulkRec = 'false'\n\t\t\t\t\tzc_BulkDelete = 'false'\n\t\t\t\t\tzc_BulkDuplicate = 'false'\n\theightType = 'auto'\n\theightValue = '700'\n\n\/>\n<\/column><column\n   \t\t width='50%'\n   \t>\n\t<report \n\telementName='Report 2'\n\n\t\tappLinkName = 'thisapp'\n\t\tlinkName = 'financial_dashboard'\n\t\n\t\tiszreport = 'true'\n\theightType = 'auto'\n\theightValue = '700'\n\n\/>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width='50%'\n   \t>\n\t<panel elementName='Panel 2'\n \n >\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\tpadding = '20px'\n\tbgColor = '#FFFFFF'\n\n\t\twidth = '100%'\n\t\thAlign = 'center'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t\n>\n\t<image  \n\t\tmarginRight = '7px' \n\n\tcolor = '#FFFFFF'\n\tbgColor = '#BEA6FC'\n\twidth = '52px'\n\theight = '52px'\n\ttype = 'icon'\n\tvalue = 'users-2-focus'\n\tsize = '24px'\n\tcornerRadius = '26px'\n\ticonType = 'solid'\n\/>\n<\/pc><pc \n\t\n\t\thAlign = 'left'\n>\n\t<pr \n\t>\n\t<pc \n\t\n\t\thAlign = 'left'\n>\n\t<text \n\n\tmargin = '0px'\n\tpadding = '0px'\n\tcolor = '#000000'\n\tsize = '16px'\n\ttype = 'Text'\n\n\tbgColor = 'transparent'\n        bgColorType = 'noFill'\n\tcornerRadius = '0px'\n\n\n\n\n\n    borderColor = '#000000'\n    borderWidth = '0px'\n\n\t  value = 'Number of Returning Customers'\n>\n<\/text>\n\n<\/pc>\n<\/pr><pr \n\t>\n\t<pc \n\t\n\t\thAlign = 'left'\n>\n\t<text \n\n\tmarginLeft = '0px'\n\tmarginRight = '0px' \n\tmarginBottom = '0px'\n\tmarginTop = '2px'\n\tpadding = '0px'\n\tcolor = '#BEA6FC'\n\tsize = '36px'\n\tbold = 'true' \n\ttype = 'variable'\n\n\tbgColor = 'transparent'\n        bgColorType = 'noFill'\n\tcornerRadius = '0px'\n\n\n\tdisplayType = 'actual'\n\tthousandsSeperator = 'COMMA'\n\tdecimalSeperator = 'DOT'\n\tnumberScale = 'none'\n\n\n\n    borderColor = '#FF8318'\n    borderWidth = '0px'\n\n\t  value = '${returning_customers}'\n>\n<\/text>\n\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column><column\n   \t\t width='50%'\n   \t>\n\t<panel elementName='Panel 8'\n \n >\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\tpadding = '20px'\n\tbgColor = '#FFFFFF'\n\n\t\twidth = '100%'\n\t\thAlign = 'center'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t\n>\n\t<image  \n\t\tmarginRight = '7px' \n\n\tcolor = '#FFFFFF'\n\tbgColor = '#BEA6FC'\n\twidth = '52px'\n\theight = '52px'\n\ttype = 'icon'\n\tvalue = 'users-2-focus'\n\tsize = '24px'\n\tcornerRadius = '26px'\n\ticonType = 'solid'\n\/>\n<\/pc><pc \n\t\n\t\thAlign = 'left'\n>\n\t<pr \n\t>\n\t<pc \n\t\n\t\thAlign = 'left'\n>\n\t<text \n\n\tmargin = '0px'\n\tpadding = '0px'\n\tcolor = '#000000'\n\tsize = '16px'\n\ttype = 'Text'\n\n\tbgColor = 'transparent'\n        bgColorType = 'noFill'\n\tcornerRadius = '0px'\n\n\n\n\n\n    borderColor = '#000000'\n    borderWidth = '0px'\n\n\t  value = 'Number of Non-Returning Customers'\n>\n<\/text>\n\n<\/pc>\n<\/pr><pr \n\t>\n\t<pc \n\t\n\t\thAlign = 'left'\n>\n\t<text \n\n\tmarginLeft = '0px'\n\tmarginRight = '0px' \n\tmarginBottom = '0px'\n\tmarginTop = '2px'\n\tpadding = '0px'\n\tcolor = '#BEA6FC'\n\tsize = '36px'\n\tbold = 'true' \n\ttype = 'variable'\n\n\tbgColor = 'transparent'\n        bgColorType = 'noFill'\n\tcornerRadius = '0px'\n\n\n\tdisplayType = 'actual'\n\tthousandsSeperator = 'COMMA'\n\tdecimalSeperator = 'DOT'\n\tnumberScale = 'none'\n\n\n\n    borderColor = '#FF8318'\n    borderWidth = '0px'\n\n\t  value = '${non_returning_customers}'\n>\n<\/text>\n\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width='50%'\n   \t>\n\t<panel elementName='Panel 10'\n \n >\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\tpadding = '20px'\n\tbgColor = '#FFFFFF'\n\n\t\twidth = '100%'\n\t\thAlign = 'center'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t\n>\n\t<image  \n\t\tmarginLeft = '0px'\n\tmarginRight = '7px' \n\tmarginBottom = '0px'\n\tmarginTop = '0px'\n\n    borderColor = '#FFFFFF'\n    borderWidth = '0px'\n\tcolor = '#FFFFFF'\n\tbgColor = '#A0E7D1'\n\twidth = '51.9978px'\n\theight = '51.9978px'\n\ttype = 'icon'\n\tvalue = 'transportation-bike'\n\tsize = '24px'\n\tcornerRadius = '26px'\n\ticonType = 'outline'\n\/>\n<\/pc><pc \n\t\n\t\thAlign = 'left'\n>\n\t<pr \n\t>\n\t<pc \n\t\n\t\thAlign = 'left'\n>\n\t<text \n\n\tmargin = '0px'\n\tpadding = '0px'\n\tcolor = '#000000'\n\tsize = '16px'\n\ttype = 'Text'\n\n\tbgColor = 'transparent'\n        bgColorType = 'noFill'\n\tcornerRadius = '0px'\n\n\n\n\n\n    borderColor = '#000000'\n    borderWidth = '0px'\n\n\t  value = 'Number of In-Place Orders Deliveries'\n>\n<\/text>\n\n<\/pc>\n<\/pr><pr \n\t>\n\t<pc \n\t\n\t\thAlign = 'left'\n>\n\t<text \n\n\tmarginLeft = '0px'\n\tmarginRight = '0px' \n\tmarginBottom = '0px'\n\tmarginTop = '2px'\n\tpadding = '0px'\n\tcolor = '#A0E7D1'\n\tsize = '36px'\n\tbold = 'true' \n\ttype = 'Form Data'\n\n\tbgColor = 'transparent'\n        bgColorType = 'noFill'\n\tcornerRadius = '0px'\n\n\n\tdisplayType = 'actual'\n\tthousandsSeperator = 'LOCALE'\n\tdecimalSeperator = 'DOT'\n\tnumberScale = 'none'\n\n\n\n    borderColor = '#FF8318'\n    borderWidth = '0px'\n\n\t\tcriteria = 'delivery == true'\n\t  value = 'thisapp.In_Place_Customer_Orders.ID.count'\n>\n<\/text>\n\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column><column\n   \t\t width='50%'\n   \t>\n\t<panel elementName='Panel 9'\n \n >\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\tpadding = '20px'\n\tbgColor = '#FFFFFF'\n\n\t\twidth = '100%'\n\t\thAlign = 'center'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t\n>\n\t<image  \n\t\tmarginLeft = '0px'\n\tmarginRight = '7px' \n\tmarginBottom = '0px'\n\tmarginTop = '0px'\n\n    borderColor = '#FFFFFF'\n    borderWidth = '0px'\n\tcolor = '#FFFFFF'\n\tbgColor = '#A0E7D1'\n\twidth = '51.9978px'\n\theight = '51.9978px'\n\ttype = 'icon'\n\tvalue = 'transportation-bike'\n\tsize = '24px'\n\tcornerRadius = '26px'\n\ticonType = 'outline'\n\/>\n<\/pc><pc \n\t\n\t\thAlign = 'left'\n>\n\t<pr \n\t>\n\t<pc \n\t\n\t\thAlign = 'left'\n>\n\t<text \n\n\tmargin = '0px'\n\tpadding = '0px'\n\tcolor = '#000000'\n\tsize = '16px'\n\ttype = 'Text'\n\n\tbgColor = 'transparent'\n        bgColorType = 'noFill'\n\tcornerRadius = '0px'\n\n\n\n\n\n    borderColor = '#000000'\n    borderWidth = '0px'\n\n\t  value = 'Number of Online Orders Deliveries'\n>\n<\/text>\n\n<\/pc>\n<\/pr><pr \n\t>\n\t<pc \n\t\n\t\thAlign = 'left'\n>\n\t<text \n\n\tmarginLeft = '0px'\n\tmarginRight = '0px' \n\tmarginBottom = '0px'\n\tmarginTop = '2px'\n\tpadding = '0px'\n\tcolor = '#A0E7D1'\n\tsize = '36px'\n\tbold = 'true' \n\ttype = 'Form Data'\n\n\tbgColor = 'transparent'\n        bgColorType = 'noFill'\n\tcornerRadius = '0px'\n\n\n\tdisplayType = 'actual'\n\tthousandsSeperator = 'LOCALE'\n\tdecimalSeperator = 'DOT'\n\tnumberScale = 'none'\n\n\n\n    borderColor = '#FF8318'\n    borderWidth = '0px'\n\n\t\tcriteria = 'delivery == true'\n\t  value = 'thisapp.Online_Customer_Orders.ID.count'\n>\n<\/text>\n\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width='50%'\n   \t>\n\t<report \n\telementName='Report'\n\n\t\n\ttitle = 'Customers Details'\n\t\n\t\ttitleColor = '#444444'\n\t\tappLinkName = 'thisapp'\n\t\tlinkName = 'Customers_Map'\n\t\n\t\tiszreport = 'false'\n\t\t\t\t\tzc_AddRec = 'false'\n\t\t\t\t\tzc_EditRec = 'false'\n\t\t\t\t\tzc_DelRec = 'false'\n\t\t\t\t\tzc_DuplRec = 'false'\n\t\t\t\t\tzc_RetainChanges = 'true'\n\t\t\t\t\tzc_EditBulkRec = 'false'\n\t\t\t\t\tzc_BulkDelete = 'false'\n\t\t\t\t\tzc_BulkDuplicate = 'false'\n\theightType = 'auto'\n\theightValue = '700'\n\n\/>\n<\/column><column\n   \t\t width='50%'\n   \t>\n\t<report \n\telementName='Report 1'\n\n\t\tappLinkName = 'thisapp'\n\t\tlinkName = 'All_Customers'\n\t\n\t\tiszreport = 'false'\n\t\t\t\t\tzc_AddRec = 'false'\n\t\t\t\t\tzc_EditRec = 'false'\n\t\t\t\t\tzc_DelRec = 'false'\n\t\t\t\t\tzc_DuplRec = 'false'\n\t\t\t\t\tzc_RetainChanges = 'true'\n\t\t\t\t\tzc_EditBulkRec = 'false'\n\t\t\t\t\tzc_BulkDelete = 'false'\n\t\t\t\t\tzc_BulkDuplicate = 'false'\n\theightType = 'auto'\n\theightValue = '700'\n\n\/>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width='50%'\n   \t>\n\t<chart \n\telementName='Chart'\n\n\t\n\ttitle = 'Most Ordered Item - In-Place Orders'\n\t\n\t\ttitleColor = '#444444'\n\ttype = 'Column'\n\txtitle = 'Items Names'\n\tytitle = 'Item Count'\n\tbgColor = '#FFFFFF'\n\ttheme = 'theme1'\n\tlegendPos = 'none'\n\tappLinkName = 'thisapp'\n\tformLinkName = 'In_Place_Customer_Orders_Details'\n\txfield = 'menu_item.item_name'\n\tyfields = 'count:menu_item.item_name'\n\tshowDataLabel = 'true'\n\/>\n\n<\/column><column\n   \t\t width='50%'\n   \t>\n\t<report \n\telementName='Report 4'\n\n\t\n\ttitle = 'Most Ordered Item - Online Orders'\n\t\n\t\ttitleColor = '#444444'\n\t\tappLinkName = 'thisapp'\n\t\tlinkName = 'most_wanted_item'\n\t\tallowPublicAccess = 'true'\n\t\n\t\tiszreport = 'true'\n\theightType = 'auto'\n\theightValue = '700'\n\n\/>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>"
			script
			{
				/* Write your script logic here. You can assign values to the page variables you've created in the previous tab. Enter 'input.' to list the created page variables. */
				// Start total at zero
				total_expenses = 0;
				// Get all finance records
				all_records = Finance_Records[ID != 0];
				// Loop through each record
				for each  rec in all_records
				{
					if(rec.record_type_dropdown == "Supplier order")
					{
						total_expenses = total_expenses + rec.amount;
					}
					if(rec.record_type_dropdown == "Payroll")
					{
						total_expenses = total_expenses + rec.amount;
					}
				}
				// Show the result
				info "Total Expenses: " + total_expenses;
				// Start total at zero
				total_incomes = 0;
				// Get all finance records
				all_records = Finance_Records[ID != 0];
				// Loop through each record
				for each  rec in all_records
				{
					if(rec.record_type_dropdown == "Customer order - in place")
					{
						total_incomes = total_incomes + rec.amount;
					}
					if(rec.record_type_dropdown == "Customer order - online")
					{
						total_incomes = total_incomes + rec.amount;
					}
				}
				// Show the result
				info "Total Incomes: " + total_incomes;
				input.earnings = total_incomes + total_expenses;
				// ========================= Returning / Non-returning customers =========================
				// This section counts unique customers from "Customer order - in place",
				// and classifies each customer as returning (>=2 orders) or non-returning (<2).
				// 1) Collect unique customer IDs from those orders
				unique_customers = List();
				// holds numeric Customer IDs
				for each  ord in In_Place_Customer_Orders
				{
					cust_id = 0;
					// default
					if(ord.customer_phone != null)
					{
						// short null check on the lookup field
						cust_id = ord.customer_phone;
					}
					if(cust_id != 0)
					{
						if(unique_customers.contains(cust_id) == false)
						{
							unique_customers.add(cust_id);
						}
					}
				}
				// 2) For each unique customer, count how many in-place orders they have
				returning_customers_count = 0;
				non_returning_customers_count = 0;
				// We avoid maps/dictionaries; we do a simple nested scan over the pulled orders
				for each  cid in unique_customers
				{
					order_count_for_cid = 0;
					for each  o in In_Place_Customer_Orders
					{
						tmp_id = 0;
						if(o.customer_phone != null)
						{
							tmp_id = o.customer_phone;
							// same lookup field as above
						}
						if(tmp_id == cid)
						{
							order_count_for_cid = order_count_for_cid + 1;
							// count occurrences
						}
					}
					// Classify
					if(order_count_for_cid >= 2)
					{
						returning_customers_count = returning_customers_count + 1;
						// returning
					}
					else
					{
						non_returning_customers_count = non_returning_customers_count + 1;
						// non-returning
					}
				}
				// 3) Save to page variables for the management dashboard
				// Make sure these page variables exist on your Page > Variables tab
				input.returning_customers = returning_customers_count;
				// returning customers count
				input.non_returning_customers = non_returning_customers_count;
				// non-returning customers count
				// 5) Optional: show quick info lines while testing (you can remove later)
				info "Returning Customers: " + returning_customers_count;
				info "Non-returning Customers: " + non_returning_customers_count;
				// ======================================================================================
			}
		}
	}


		workflow
		{
		form
		{
			Filter_products_by_suppli as "Filter products by supplier"
			{
				type =  form
				form = Suppliers_Orders
				record event = on add or edit

				on add row of order_details
				{
					actions 
					{
						custom deluge script
						(
											this_supplier = input.supplier;
										products = Suppliers_Products[supplier == this_supplier];
										product_list = List();
										for each  product in products
										{
											product_list.add(product.inventory);
											// inventory = המוצר
										}
										row.supplier=this_supplier;
										row.product:ui.add(product_list);
						)
					}
				}

			}
			Set_unit_price_by_supplie as "Set unit price by supplier and product"
			{
				type =  form
				form = Suppliers_Orders
				record event = on add or edit

				on user input of order_details.product
				{
					actions 
					{
						custom deluge script
						(
											//  When a product is chosen → pull its supplier price
										if(row.product != null)
										{
											sp_list = Suppliers_Products[supplier == input.supplier && inventory == row.product];
											if(sp_list.count() > 0)
											{
												// take the first match
												for each  sp in sp_list
												{
													row.unit_price=ifnull(sp.products_price,null);
													break;
												}
											}
											else
											{
												alert "No price found for this Supplier–Product. Please set it in Suppliers_Products.";
												row.unit_price=null;
											}
										}
										else
										{
											// product cleared → reset the row
											row.unit_price=null;
											row.total_price_per_product=null;
											row.quantity=null;
										}
										//  Row total (only if we have both quantity and price)
										if(row.quantity != null && row.unit_price != null)
										{
											row.total_price_per_product=row.quantity * row.unit_price;
										}
										else
										{
											row.total_price_per_product=null;
										}
										//  Recalculate order total from all subform lines
										total = 0.0;
										for each  item in input.order_details
										{
											if(item.total_price_per_product != null)
											{
												total = total + item.total_price_per_product;
											}
										}
										input.total_order_price = round(total,2);
						)
					}
				}

			}
			Hide_the_supplier_filed_i as "Hide the supplier filed in the subform"
			{
				type =  form
				form = Suppliers_Orders
				record event = on add or edit

				on load
				{
					actions 
					{
						custom deluge script
						(
											hide order_details.supplier;
						)
					}
				}

			}
			Disable_the_DateTime_file as "Disable the \"DateTime\" filed"
			{
				type =  form
				form = Suppliers_Orders
				record event = on add or edit

				on load
				{
					actions 
					{
						custom deluge script
						(
											disable order_date_time;
										disable arrival_date_time;
						)
					}
				}

			}
			Add_Delivery_Charge_To_Or as "Add Delivery Charge To Order"
			{
				type =  form
				form = In_Place_Customer_Orders
				record event = on add or edit

				on user input of delivery
				{
					actions 
					{
						custom deluge script
						(
											// Start with recalculating total price from subform
										total_amount = 0.0;
										for each  line_item in input.order_details
										{
											if(line_item.total_price_per_item != null && line_item.total_price_per_item > 0)
											{
												total_amount = total_amount + line_item.total_price_per_item;
											}
										}
										// Apply discount if exists
										if(input.discount != null && input.discount > 0)
										{
											discount_value = (total_amount * input.discount) / 100;
											total_amount = total_amount - discount_value;
										}
										// Add delivery cost if checkbox is checked
										if(input.delivery == true)
										{
											total_amount = total_amount + 15;
										}
										input.total_order_price = total_amount;
						)
					}
				}

			}
			Load_Available_Menu_Items as "Load Available Menu Items On Row Add"
			{
				type =  form
				form = In_Place_Customer_Orders
				record event = on add or edit

				on add row of order_details
				{
					actions 
					{
						custom deluge script
						(
											available_items = List();
										// נשלוף את כל המוצרים מהתפריט (Menu)
										menu_items = Menu[available == true];
										for each  menu_item in menu_items
										{
											recipe_rows = Recipes[item == menu_item.ID];
											can_prepare = true;
											for each  recipe in recipe_rows
											{
												ingredient_record = Inventory[ID == recipe.product];
												if(ingredient_record.count() > 0)
												{
													if(ingredient_record.current_stock < recipe.quantity)
													{
														can_prepare = false;
														break;
													}
												}
												else
												{
													can_prepare = false;
													break;
												}
											}
											if(can_prepare)
											{
												available_items.add(menu_item.ID);
											}
										}
										// עדכון רשימת האפשרויות בשדה menu_item ב־subform
										row.menu_item:ui.add(available_items);
						)
					}
				}

			}
			Validate_Stock_Before_Sav as "Validate Stock Before Save"
			{
				type =  form
				form = In_Place_Customer_Orders
				record event = on add or edit

				on validate
				{
					actions 
					{
						custom deluge script
						(
											// Track total needed per ingredient
										ingredient_totals = List();
										ingredient_item_map = Map();
										// To link ingredient to menu items
										// Build totals for each ingredient across all lines
										for each  row_item in input.order_details
										{
											if(row_item.menu_item != null && row_item.quantity != null && row_item.quantity > 0)
											{
												recipe_rows = Recipes[item == row_item.menu_item];
												menu_name = Menu[ID == row_item.menu_item].item_name;
												for each  recipe in recipe_rows
												{
													needed_qty = recipe.quantity * row_item.quantity;
													found = false;
													for each  ing in ingredient_totals
													{
														if(ing.get("id") == recipe.product)
														{
															ing.put("qty",ing.get("qty") + needed_qty);
															found = true;
														}
													}
													if(found == false)
													{
														new_map = Map();
														new_map.put("id",recipe.product);
														new_map.put("qty",needed_qty);
														ingredient_totals.add(new_map);
													}
													// Track menu items for this ingredient
													if(ingredient_item_map.containKey(recipe.product))
													{
														items_list = ingredient_item_map.get(recipe.product);
														if(!items_list.contains(menu_name))
														{
															items_list.add(menu_name);
														}
														ingredient_item_map.put(recipe.product,items_list);
													}
													else
													{
														items_list = List();
														items_list.add(menu_name);
														ingredient_item_map.put(recipe.product,items_list);
													}
												}
											}
										}
										// Check stock for each ingredient
										problematic_items = List();
										for each  ing in ingredient_totals
										{
											inv = Inventory[ID == ing.get("id")];
											if(inv.count() > 0)
											{
												if(inv.current_stock < ing.get("qty"))
												{
													related_items = ingredient_item_map.get(ing.get("id"));
													for each  item in related_items
													{
														if(!problematic_items.contains(item))
														{
															problematic_items.add(item);
														}
													}
												}
											}
										}
										if(problematic_items.size() > 0)
										{
											message = "Order cannot be saved!\nThere is not enough stock to fulfill the requested quantities for:\n" + problematic_items.toString(", ") + "\nPlease adjust your order and try again.";
											alert message;
											cancel submit;
										}
						)
					}
				}

			}
			Block_Duplicate_or_Absent as "Block Duplicate or Absent Employee"
			{
				type =  form
				form = Shifts
				record event = on add or edit

				on user input of shift_assigments.employee
				{
					actions 
					{
						custom deluge script
						(
											/* ────────────── 0) block inactive employees ────────────── */
										if(row.employee != null)
										{
											// a choice was made
											isAct = Employees[ID == row.employee].is_active;
											// TRUE / FALSE / NULL
											if(isAct == false || isAct == null)
											{
												// treat NULL as “inactive”
												alert "This employee is inactive – choose another one.";
												row.employee=null;
												// clear the cell
												return;
												// stop further checks
											}
										}
										/* ────────────── 1) duplicate in this sub-form? ────────────── */
										for each  line in input.shift_assigments
										{
											if(line != row && line.employee != null && line.employee == row.employee)
											{
												alert "This employee is already assigned to the shift.";
												row.employee=null;
												return;
												// stop further processing
											}
										}
										/* (other validation rules can follow below) */
										/* ────────────── 1) Block ABSENT employees ──────────────── */
										/* Needed fields (adjust the bold parts to YOUR link-names)
										       • input.date           (DATE on the main Shifts form)
										       • row.shift            (lookup – the shift-type in this row)
										       • Employees_Absences.date
										       • Employees_Absences.shift_types  (multi-select lookup)
										*/
										/* ────────────── 1) Block ABSENT employees ──────────────── */
										/* Needs …  input.shift_date (DATE)
										            input.shifts_type (lookup – single value)
										            Employees_Absences.absence_date (DATE)
										            Employees_Absences.Shifts_Types (lookup MULTI-select)             */
										if(row.employee != null && input.shift_date != null && input.shifts_type != null)
										{
											empID = row.employee.ID;
											theDate = input.shift_date;
											shiftRec = input.shifts_type;
											// a record object
											absList = Employees_Absences[employee == empID && absence_date == theDate];
											/* —— walk through every absence for that day —— */
											for each  abs in absList
											{
												/* Shifts_Types is a multi-select lookup */
												for each  st in abs.shifts_types
												{
													/* st is also a record object */
													if(st.ID == shiftRec)
													{
														// absent for THIS shift-type?
														alert "Employee has an absence for this date & shift.";
														row.employee=null;
														// clear the pick-list cell
														return;
														// ✋ stop further checks
													}
												}
											}
										}
						)
					}
				}

			}
			Auto_fill_Start_Time_End_ as "Auto-fill Start Time & End Time"
			{
				type =  form
				form = Shifts
				record event = on add or edit

				on user input of shifts_type
				{
					actions 
					{
						custom deluge script
						(
											if(input.shifts_type != null)
										{
											// fetch the chosen Shift Type record
											stype = Shifts_Types[ID == input.shifts_type];
											if(stype != null)
											{
												// guard against missing values in the master record
												if(stype.start_time != null)
												{
													input.shift_start_time = stype.start_time;
												}
												if(stype.end_time != null)
												{
													input.shift_end_time = stype.end_time;
												}
											}
											else
											{
												alert "Shift type not found. Please pick a valid type.";
											}
										}
										input.cleanings_needed_num = input.shifts_type.cleanings_needed;
										input.line_workers_needed_num = input.shifts_type.line_workers_needed;
										input.cooks_needed_num = input.shifts_type.cooks_needed;
										input.delivery_driver_needed_num = input.shifts_type.delivery_driver_needed;
						)
					}
				}

			}
			Validate_Minimum_Staff_Ne as "Validate Minimum Staff Needed"
			{
				type =  form
				form = Shifts
				record event = on add or edit

				on validate
				{
					actions 
					{
						custom deluge script
						(
											/* ----- 1. Count assigned employees by type ----- */
										workers = 0;
										cooks = 0;
										cleans = 0;
										drivers = 0;
										// ADDED
										for each  line in input.shift_assigments
										{
											if(line.employee != null)
											{
												etype = line.employee.employee_type;
												// link-name; check spelling
												if(etype == "Line Worker")
												{
													workers = workers + 1;
												}
												else if(etype == "Cook")
												{
													cooks = cooks + 1;
												}
												else if(etype == "Cleaning")
												{
													cleans = cleans + 1;
												}
												else if(etype == "Delivery Driver")
												{
													// ADDED
													drivers = drivers + 1;
												}
											}
										}
										/* ----- 2. Fetch the Shift Type requirements ----- */
										stype = Shifts_Types[ID == input.shifts_type];
										// unchanged
										// lookup record
										if(stype == null)
										{
											alert "Please choose a Shift Type.";
											cancel submit;
										}
										/* ----- 3. Compare and block if below minimum ----- */
										if(workers < stype.line_workers_needed)
										{
											alert "Need at least " + stype.line_workers_needed + " workers for this shift.";
											cancel submit;
										}
										if(cooks < stype.cooks_needed)
										{
											alert "Need at least " + stype.cooks_needed + " cooks for this shift.";
											cancel submit;
										}
										if(cleans < stype.cleanings_needed)
										{
											alert "Need at least " + stype.cleanings_needed + " cleaning staff for this shift.";
											cancel submit;
										}
										if(drivers < stype.delivery_driver_needed)
										{
											// ADDED
											alert "Need at least " + stype.delivery_driver_needed + " delivery drivers for this shift.";
											cancel submit;
										}
										/* If we reach here, all minimums are satisfied — form saves. */
						)
					}
				}

			}
			Auto_fill_Employee_Type as "Auto-fill Employee Type"
			{
				type =  form
				form = Shifts
				record event = on add or edit

				on user input of shift_assigments.employee
				{
					actions 
					{
						custom deluge script
						(
											/********************************************************************
										 Shifts → shift_assigments (subform)
										 Field: employee (lookup) | On User Input
										 Goal: fill/clear the subform column employee_type
										 Uses: Employees.employee_type (TEXT)
										********************************************************************/
										if(row.employee != null)
										{
											// row.employee holds the selected Employees record (ID)
											emp = Employees[ID == row.employee];
											if(emp != null && emp.employee_type != null && emp.employee_type != "")
											{
												row.employee_type=emp.employee_type;
												// copy from Employees
											}
											else
											{
												row.employee_type=null;
												// no type on employee record
											}
										}
										else
										{
											// Employee cleared → clear the Type cell too
											row.employee_type=null;
										}
						)
					}
				}

			}
			Block_Weekend_Date as "Block Weekend Date"
			{
				type =  form
				form = Shifts
				record event = on add or edit

				on user input of shift_date
				{
					actions 
					{
						custom deluge script
						(
											/********************************************************************
										  Shifts  |  Field: shift_date  |  On User Input
										********************************************************************/
										if(input.shift_date != null)
										{
											/* Full weekday: "Sunday", "Monday", … */
											dayName = input.shift_date.toString("EEEE");
											// <-- change is here
											/* Block Friday & Saturday */
											if(dayName == "Friday" || dayName == "Saturday")
											{
												alert "Shifts cannot be scheduled on Friday or Saturday.";
												input.shift_date = null;
												input.weekday = null;
												return;
											}
											/* Fill / update the Weekday field */
											input.weekday = dayName;
											// e.g. "Thursday"
										}
						)
					}
				}

			}
			Calculate_line_and_total_ as "Calculate line and total order price"
			{
				type =  form
				form = Suppliers_Orders
				record event = on add or edit

				on user input of order_details.quantity
				{
					actions 
					{
						custom deluge script
						(
											// If quantity is empty → clear row total and recalc order total, then exit
										if(row.quantity == null)
										{
											row.total_price_per_product=null;
											total = 0.0;
											for each  item in input.order_details
											{
												if(item.total_price_per_product != null)
												{
													total = total + item.total_price_per_product;
												}
											}
											input.total_order_price = round(total,2);
											return;
										}
										// Row total (only if price exists)
										if(row.unit_price != null)
										{
											row.total_price_per_product=row.quantity * row.unit_price;
										}
										else
										{
											row.total_price_per_product=null;
										}
										// Recalculate order total
										total = 0.0;
										for each  item in input.order_details
										{
											if(item.total_price_per_product != null)
											{
												total = total + item.total_price_per_product;
											}
										}
										input.total_order_price = round(total,2);
						)
					}
				}

			}
			Disable_editing_after_1_h as "Disable editing after 1 hour"
			{
				type =  form
				form = Suppliers_Orders
				record event = on edit

				on load
				{
					actions 
					{
						custom deluge script
						(
											if(input.ID != null && input.order_date_time != null)
										{
											// מחשב את הזמן שעבר בין now לבין זמן ההזמנה
											time_diff = input.order_date_time.timeBetween(zoho.currenttime);
											// מחזיר מחרוזת "HH:mm:ss"
											// מפצל את המחרוזת לרשימה
											parts = time_diff.toList(":");
											// [hours, minutes, seconds]
											// ממיר למספרים
											hours = parts.get(0).toLong();
											minutes = parts.get(1).toLong();
											total_minutes = hours * 60 + minutes;
											if(total_minutes > 60)
											{
												alert "Editing is disabled. More than 60 minutes have passed since submission.";
												// נועלים שדות
												disable supplier;
												disable order_details.product;
												disable order_details.quantity;
												disable order_details.unit_price;
												disable order_details.total_price_per_product;
												disable total_order_price;
											}
										}
						)
					}
				}

			}
			Disable_delete_order_afte as "Disable delete order after 1 hour"
			{
				type =  form
				form = Suppliers_Orders
				record event = on delete

				on validate
				{
					actions 
					{
						custom deluge script
						(
											if(input.ID != null && input.order_date_time != null)
										{
											// מחשב את הזמן שעבר בין now לבין זמן ההזמנה
											time_diff = input.order_date_time.timeBetween(zoho.currenttime);
											// מחזיר מחרוזת "HH:mm:ss"
											// מפצל את המחרוזת לרשימה
											parts = time_diff.toList(":");
											// [hours, minutes, seconds]
											// ממיר למספרים
											hours = parts.get(0).toLong();
											minutes = parts.get(1).toLong();
											total_minutes = hours * 60 + minutes;
											if(total_minutes > 60)
											{
												alert "Order cancellation is not available after one hour from placement. Please contact the supplier directly by phone";
												cancel delete;
											}
										}
						)
					}
				}

			}
			Set_order_DateTime_on_sub1 as "Set order DateTime on submit"
			{
				type =  form
				form = Suppliers_Orders
				record event = on add

				on success
				{
					actions 
					{
						custom deluge script
						(
											input.order_date_time = zoho.currenttime;
						)
					}
				}

			}
			Set_order_DateTime_on_loa as "Set order DateTime on load"
			{
				type =  form
				form = Suppliers_Orders
				record event = on add

				on load
				{
					actions 
					{
						custom deluge script
						(
											input.order_date_time = zoho.currenttime;
						)
					}
				}

			}
			Set_Current_Order_DateTim as "Set Current Order DateTime On Load"
			{
				type =  form
				form = In_Place_Customer_Orders
				record event = on add

				on load
				{
					actions 
					{
						custom deluge script
						(
											if(input.ID == null)
										{
											// Only when creating a new order
											input.order_date_time = zoho.currenttime;
											// Set current date & time
											disable order_date_time;
											// Lock the field so user can't change
										}
						)
					}
				}

			}
			Checks_If_Customer_Exist as "Checks If Customer Exist"
			{
				type =  form
				form = In_Place_Customer_Orders
				record event = on add or edit

				on user input of customer_phone
				{
					actions 
					{
						custom deluge script
						(
											if(input.customer_phone != null)
										{
											// אם נבחר מספר טלפון - נטען פרטים
											customer_record = Customers[ID == input.customer_phone];
											if(customer_record.count() > 0)
											{
												// ממלאים שם
												input.customer_name.first_name = customer_record.customer_name.first_name;
												input.customer_name.last_name = customer_record.customer_name.last_name;
												// ממלאים כתובת
												input.customer_address.address_line_1 = customer_record.customer_address.address_line_1;
												input.customer_address.district_city = customer_record.customer_address.district_city;
											}
										}
										else
										{
											// אם המשתמש מחק את הטלפון - מאפסים את השדות
											input.customer_name.first_name = "";
											input.customer_name.last_name = "";
											input.customer_address.address_line_1 = "";
											input.customer_address.district_city = "";
										}
						)
					}
				}

			}
			Mark_Returning_Customer_O as "Mark Returning Customer On Order Save"
			{
				type =  form
				form = In_Place_Customer_Orders
				record event = on add or edit

				on success
				{
					actions 
					{
						custom deluge script
						(
											if(input.customer_phone != null)
										{
											// נמצא את הלקוח לפי ה-ID שבשדה customer_phone
											customer_record = Customers[ID == input.customer_phone];
											if(customer_record.count() > 0)
											{
												customer_record.returning_customer=true;
											}
										}
						)
					}
				}

			}
			Discount_For_Returning_Cu as "Discount For Returning Customers"
			{
				type =  form
				form = In_Place_Customer_Orders
				record event = on add or edit

				on user input of customer_phone
				{
					actions 
					{
						custom deluge script
						(
											if(input.customer_phone != null)
										{
											customer_record = Customers[ID == input.customer_phone];
											if(customer_record.count() > 0)
											{
												if(customer_record.returning_customer == true)
												{
													input.discount = 5;
													// 5%
												}
												else
												{
													input.discount = 0;
													// No discount
												}
											}
										}
										else
										{
											input.discount = 0;
											// Reset discount if no customer selected
										}
										// Recalculate total order price
										total_amount = 0.0;
										for each  line_item in input.order_details
										{
											if(line_item.total_price_per_item != null && line_item.total_price_per_item > 0)
											{
												total_amount = total_amount + line_item.total_price_per_item;
											}
										}
										// Apply discount
										if(input.discount != null && input.discount > 0)
										{
											discount_value = (total_amount * input.discount) / 100;
											total_amount = total_amount - discount_value;
										}
										// Add delivery charge if checked
										if(input.delivery == true)
										{
											total_amount = total_amount + 15;
										}
										input.total_order_price = total_amount;
						)
					}
				}

			}
			Hide_Order_Received_ as "Hide \"Order Received\""
			{
				type =  form
				form = Suppliers_Orders
				record event = on add or edit

				on load
				{
					actions 
					{
						custom deluge script
						(
											hide order_received;
						)
					}
				}

			}
			Prevent_Absences_On_Weeke as "Prevent Absences On Weekend"
			{
				type =  form
				form = Employees_Absences
				record event = on add or edit

				on user input of absence_date
				{
					actions 
					{
						custom deluge script
						(
											if(input.absence_date != null)
										{
											// "EEE" → "Sun", "Mon", …, "Fri", "Sat"
											dayAbbr = input.absence_date.toString("EEE");
											if(dayAbbr == "Fri" || dayAbbr == "Sat")
											{
												alert "Shifts cannot be scheduled on Friday or Saturday.";
												input.absence_date = null;
												// clear the field
												return;
											}
										}
						)
					}
				}

			}
			Update_Stock_Inventory_Al as "Update Stock Inventory + Alert Low Inventory"
			{
				type =  form
				form = In_Place_Customer_Orders
				record event = on add or edit

				on success
				{
					actions 
					{
						custom deluge script
						(
											shortages = list();
										// מעבר על כל שורות ההזמנה
										for each  row_item in input.order_details
										{
											if(row_item.menu_item != null && row_item.quantity != null && row_item.quantity > 0)
											{
												recipe_rows = Recipes[item == row_item.menu_item];
												for each  recipe in recipe_rows
												{
													if(recipe.product != null && recipe.quantity != null)
													{
														qty_to_deduct = recipe.quantity * row_item.quantity;
														inv = Inventory[ID == recipe.product];
														if(inv.count() > 0)
														{
															new_stock = ifnull(inv.current_stock,0) - qty_to_deduct;
															if(new_stock < 0)
															{
																new_stock = 0;
															}
															inv.current_stock=new_stock;
															if(inv.saftey_stock != null && new_stock < inv.saftey_stock)
															{
																alert_text = inv.product_name + "<br>" + "Current stock: " + new_stock.toString() + "<br>" + "Safety stock: " + inv.saftey_stock.toString() + "<br><br>";
																shortages.add(alert_text);
															}
														}
													}
												}
											}
										}
										// שליחת מייל אם יש פריטים עם חוסרים
										if(shortages.size() > 0)
										{
											message = "<b> Low stock alert!</b><br><br>";
											message = message + "The following items have dropped below their safety stock:\n";
											message = message + shortages.toString("");
											message = message + "Please consider placing a supplier order.";
											sendmail
											[
												from :zoho.adminuserid
												to :zoho.adminuser
												subject :"CANN Pizerria - Low Stock Warning !"
												message :message
											]
										}
						)
					}
				}

			}
			Alert_Low_Inventory as "Alert Low Inventory"
			{
				type =  form
				form = Inventory
				record event = on add or edit

				on success
				{
					actions 
					{
						custom deluge script
						(
											if(input.current_stock != null && input.saftey_stock != null)
										{
											if(input.current_stock < input.saftey_stock)
											{
												message = "<b>Low stock alert!</b><br><br>";
												message = message + "The following item has dropped below its safety stock:<br><br>";
												message = message + input.product_name + "<br>";
												message = message + "Current stock: " + input.current_stock.toString() + "<br>";
												message = message + "Safety stock: " + input.saftey_stock.toString() + "<br><br>";
												message = message + "Please consider placing a supplier order.";
												sendmail
												[
													from :zoho.adminuserid
													to :zoho.adminuser
													subject :"CANN Pizerria - Low Stock Warning ! "
													message :message
												]
											}
										}
						)
					}
				}

			}
			Update_total_price_on_row as "Update total price on row deletion"
			{
				type =  form
				form = Suppliers_Orders
				record event = on add or edit

				on delete row of order_details
				{
					actions 
					{
						custom deluge script
						(
											/*
										input.total_order_price = input.total_order_price - row.total_price_per_product;
										*/
										// On Delete Row (subform)
										input.total_order_price = round(max(0.0,ifnull(input.total_order_price,0.0) - ifnull(row.total_price_per_product,0.0)),2);
						)
					}
				}

			}
			Calculate_Discount_After_ as "Calculate Discount After Change (Discount)"
			{
				type =  form
				form = In_Place_Customer_Orders
				record event = on add or edit

				on user input of discount
				{
					actions 
					{
						custom deluge script
						(
											// Step 1: Calculate original total from order lines
										original_total = 0.0;
										for each  line_item in input.order_details
										{
											if(line_item.total_price_per_item != null && line_item.total_price_per_item > 0)
											{
												original_total = original_total + line_item.total_price_per_item;
											}
										}
										// Step 2: Apply discount (only once)
										final_total = original_total;
										if(input.discount != null && input.discount > 0)
										{
											discount_amount = (original_total * input.discount) / 100;
											final_total = original_total - discount_amount;
										}
										// Step 3: Add delivery fee if checked
										if(input.delivery == true)
										{
											final_total = final_total + 15;
										}
										// Step 4: Update final price in the form
										input.total_order_price = final_total;
						)
					}
				}

			}
			Set_Current_Order_DateTim1 as "Set Current Order DateTime On Load"
			{
				type =  form
				form = Online_Customer_Orders
				record event = on add

				on load
				{
					actions 
					{
						custom deluge script
						(
											if(input.ID == null)
										{
											// Only when creating a new order
											input.order_date_time = zoho.currenttime;
											// Set current date & time
											disable order_date_time;
											// Lock the field so user can't change
										}
						)
					}
				}

			}
			Add_Delivery_Charge_To_Or1 as "Add Delivery Charge To Order"
			{
				type =  form
				form = Online_Customer_Orders
				record event = on add or edit

				on user input of delivery
				{
					actions 
					{
						custom deluge script
						(
											// נאחזר את הסכום מכל שורות הסאבפורם
										total = 0.0;
										for each  row in input.order_details
										{
											if(row.total_price_per_item != null && row.total_price_per_item > 0)
											{
												total = total + row.total_price_per_item;
											}
										}
										// אם סומן משלוח – נוסיף 15 ש"ח
										if(input.delivery == true)
										{
											total = total + 15;
										}
										// נעדכן את המחיר הכולל
										input.total_order_price = total;
						)
					}
				}

			}
			Update_Unit_Price_On_And_ as "Update Unit Price On And Total Price (Menu Item)"
			{
				type =  form
				form = Online_Customer_Orders
				record event = on add or edit

				on user input of order_details.menu_item
				{
					actions 
					{
						custom deluge script
						(
											// Fetch price from Menu and update unit price
										if(row.menu_item != null)
										{
											menu_item_record = Menu[ID == row.menu_item];
											if(menu_item_record.count() > 0)
											{
												row.unit_price=menu_item_record.item_price;
											}
										}
										// Calculate total per item if quantity is valid
										if(row.quantity != null && row.unit_price != null)
										{
											row.total_price_per_item=row.quantity * row.unit_price;
										}
										// Recalculate total order price from subform
										total_amount = 0.0;
										for each  line_item in input.order_details
										{
											if(line_item.total_price_per_item != null && line_item.total_price_per_item > 0)
											{
												total_amount = total_amount + line_item.total_price_per_item;
											}
										}
										// Add delivery charge if delivery checkbox is checked
										if(input.delivery == true)
										{
											total_amount = total_amount + 15;
										}
										// Update total order price
										input.total_order_price = total_amount;
						)
					}
				}

			}
			Update_Prices_on_Menu_Ite as "Update Prices on Menu Item Change"
			{
				type =  form
				form = Online_Customer_Orders
				record event = on add or edit

				on user input of order_details.menu_item
				{
					actions 
					{
						custom deluge script
						(
											// אם בוחרים פריט מהתפריט – נעדכן מחיר
										if(row.menu_item != null)
										{
											menu_item_record = Menu[ID == row.menu_item];
											if(menu_item_record.count() > 0)
											{
												row.unit_price=menu_item_record.item_price;
											}
										}
										else
										{
											// אם הוסר פריט – אפס מחירים
											row.unit_price=null;
											row.total_price_per_item=null;
										}
										// חישוב שורה אם יש גם כמות וגם מחיר
										if(row.quantity != null && row.unit_price != null)
										{
											row.total_price_per_item=row.quantity * row.unit_price;
										}
										// חישוב סך כל ההזמנה מהשורות
										total_amount = 0.0;
										for each  line_item in input.order_details
										{
											if(line_item.total_price_per_item != null && line_item.total_price_per_item > 0)
											{
												total_amount = total_amount + line_item.total_price_per_item;
											}
										}
										// תוספת משלוח אם סומן
										if(input.delivery == true)
										{
											total_amount = total_amount + 15;
										}
										input.total_order_price = total_amount;
						)
					}
				}

			}
			Update_Line_Total_on_Quan as "Update Line Total on Quantity Change"
			{
				type =  form
				form = Online_Customer_Orders
				record event = on add or edit

				on user input of order_details.quantity
				{
					actions 
					{
						custom deluge script
						(
											// אם אין כמות – אפס את מחיר השורה
										if(row.quantity == null)
										{
											row.total_price_per_item=null;
										}
										else if(row.unit_price != null)
										{
											// אם יש גם כמות וגם מחיר – חשב את הסכום לשורה
											row.total_price_per_item=row.quantity * row.unit_price;
										}
										// נחשב את סכום כל ההזמנה מחדש מהשורות
										total_amount = 0.0;
										for each  line_item in input.order_details
										{
											if(line_item.total_price_per_item != null && line_item.total_price_per_item > 0)
											{
												total_amount = total_amount + line_item.total_price_per_item;
											}
										}
										// אם מסומן משלוח – נוסיף 15 ש"ח
										if(input.delivery == true)
										{
											total_amount = total_amount + 15;
										}
										// נעדכן את שדה הסכום הכולל
										input.total_order_price = total_amount;
						)
					}
				}

			}
			Load_Available_Menu_Items1 as "Load Available Menu Items on Row Add"
			{
				type =  form
				form = Online_Customer_Orders
				record event = on add or edit

				on add row of order_details
				{
					actions 
					{
						custom deluge script
						(
											available_items = List();
										// שליפת כל פריטי התפריט שזמינים
										menu_items = Menu[available == true];
										for each  menu_item in menu_items
										{
											recipe_rows = Recipes[item == menu_item.ID];
											can_prepare = true;
											for each  recipe in recipe_rows
											{
												ingredient_record = Inventory[ID == recipe.product];
												if(ingredient_record.count() > 0)
												{
													if(ingredient_record.current_stock < recipe.quantity)
													{
														can_prepare = false;
														break;
													}
												}
												else
												{
													can_prepare = false;
													break;
												}
											}
											if(can_prepare)
											{
												available_items.add(menu_item.ID);
											}
										}
										// עדכון רשימת האפשרויות לשדה Menu_Item בסאבפורם
										row.menu_item:ui.add(available_items);
						)
					}
				}

			}
			Validate_Stock_Before_Sav1 as "Validate Stock Before Save"
			{
				type =  form
				form = Online_Customer_Orders
				record event = on add or edit

				on validate
				{
					actions 
					{
						custom deluge script
						(
											// Track total needed per ingredient
										ingredient_totals = List();
										ingredient_item_map = Map();
										// To link ingredient to menu items
										// Build totals for each ingredient across all lines
										for each  row_item in input.order_details
										{
											if(row_item.menu_item != null && row_item.quantity != null && row_item.quantity > 0)
											{
												recipe_rows = Recipes[item == row_item.menu_item];
												menu_name = Menu[ID == row_item.menu_item].item_name;
												for each  recipe in recipe_rows
												{
													needed_qty = recipe.quantity * row_item.quantity;
													found = false;
													for each  ing in ingredient_totals
													{
														if(ing.get("id") == recipe.product)
														{
															ing.put("qty",ing.get("qty") + needed_qty);
															found = true;
														}
													}
													if(found == false)
													{
														new_map = Map();
														new_map.put("id",recipe.product);
														new_map.put("qty",needed_qty);
														ingredient_totals.add(new_map);
													}
													// Track menu items for this ingredient
													if(ingredient_item_map.containKey(recipe.product))
													{
														items_list = ingredient_item_map.get(recipe.product);
														if(!items_list.contains(menu_name))
														{
															items_list.add(menu_name);
														}
														ingredient_item_map.put(recipe.product,items_list);
													}
													else
													{
														items_list = List();
														items_list.add(menu_name);
														ingredient_item_map.put(recipe.product,items_list);
													}
												}
											}
										}
										// Check stock for each ingredient
										problematic_items = List();
										for each  ing in ingredient_totals
										{
											inv = Inventory[ID == ing.get("id")];
											if(inv.count() > 0)
											{
												if(inv.current_stock < ing.get("qty"))
												{
													related_items = ingredient_item_map.get(ing.get("id"));
													for each  item in related_items
													{
														if(!problematic_items.contains(item))
														{
															problematic_items.add(item);
														}
													}
												}
											}
										}
										if(problematic_items.size() > 0)
										{
											message = "Order cannot be saved!\nThere is not enough stock to fulfill the requested quantities for:\n" + problematic_items.toString(", ") + "\nPlease adjust your order and try again.";
											alert message;
											cancel submit;
										}
						)
					}
				}

			}
			Check_Menu_Item_Quantity_2 as "Check Menu Item Quantity Against Stock (Quantity)"
			{
				type =  form
				form = Online_Customer_Orders
				record event = on add or edit

				on user input of order_details.quantity
				{
					actions 
					{
						custom deluge script
						(
											if(row.menu_item != null && row.quantity != null)
										{
											recipe_rows = Recipes[item == row.menu_item];
											min_possible = null;
											for each  recipe in recipe_rows
											{
												ingredient = Inventory[ID == recipe.product];
												if(ingredient.count() > 0 && recipe.quantity > 0)
												{
													possible_by_this_ingredient = floor(ingredient.current_stock / recipe.quantity);
													if(min_possible == null || possible_by_this_ingredient < min_possible)
													{
														min_possible = possible_by_this_ingredient;
													}
												}
												else
												{
													min_possible = 0;
													break;
												}
											}
											if(min_possible != null && row.quantity > min_possible)
											{
												alert "You requested " + row.quantity + " units. The maximum available from stock is " + min_possible + ". The quantity has been updated automatically.";
												// Update the quantity to the maximum available
												row.quantity=min_possible;
												// Recalculate total for the line
												if(row.unit_price != null)
												{
													row.total_price_per_item=row.quantity * row.unit_price;
												}
												// Recalculate total order price
												total_amount = 0.0;
												for each  line_item in input.order_details
												{
													if(line_item.total_price_per_item != null && line_item.total_price_per_item > 0)
													{
														total_amount = total_amount + line_item.total_price_per_item;
													}
												}
												// Add delivery fee if delivery is checked
												if(input.delivery == true)
												{
													total_amount = total_amount + 15;
												}
												input.total_order_price = total_amount;
											}
										}
						)
					}
				}

			}
			Update_Stock_Inventory_Al1 as "Update Stock Inventory + Alert Low Inventory"
			{
				type =  form
				form = Online_Customer_Orders
				record event = on add or edit

				on success
				{
					actions 
					{
						custom deluge script
						(
											// Build shortages list for low stock email
										shortages = List();
										// Loop over all order lines
										for each  line_item in input.order_details
										{
											if(line_item.menu_item != null && line_item.quantity != null && line_item.quantity > 0)
											{
												// Get recipe rows for the selected menu item
												recipe_rows = Recipes[item == line_item.menu_item];
												for each  rec in recipe_rows
												{
													if(rec.product != null && rec.quantity != null)
													{
														// Calculate quantity to deduct from inventory
														qty_to_deduct = rec.quantity * line_item.quantity;
														// Fetch inventory record
														inv = Inventory[ID == rec.product];
														if(inv.count() > 0)
														{
															// New stock (never below zero)
															new_stock = ifnull(inv.current_stock,0) - qty_to_deduct;
															if(new_stock < 0)
															{
																new_stock = 0;
															}
															// Update stock
															inv.current_stock=new_stock;
															// If below safety stock, add to shortages list for email
															if(inv.saftey_stock != null && new_stock < inv.saftey_stock)
															{
																alert_text = inv.product_name + "<br>" + "Current stock: " + new_stock.toString() + "<br>" + "Safety stock: " + inv.saftey_stock.toString() + "<br><br>";
																shortages.add(alert_text);
															}
														}
													}
												}
											}
										}
										// Send email if there are shortages
										if(shortages.size() > 0)
										{
											message = "<b> Low stock alert!</b><br><br>";
											message = message + "The following items have dropped below their safety stock:\n";
											message = message + shortages.toString("");
											message = message + "Please consider placing a supplier order.";
											sendmail
											[
												from :zoho.adminuserid
												to :zoho.adminuser
												subject :"CANN Pizerria - Low Stock Warning !"
												message :message
											]
										}
						)
					}
				}

			}
			Set_Order_DateTime_On_Sub as "Set Order DateTime On Submit"
			{
				type =  form
				form = Online_Customer_Orders
				record event = on add or edit

				on success
				{
					actions 
					{
						custom deluge script
						(
											input.order_date_time = zoho.currenttime;
						)
					}
				}

			}
			Disable_DateTime_Filed as "Disable DateTime Filed"
			{
				type =  form
				form = Online_Customer_Orders
				record event = on add or edit

				on load
				{
					actions 
					{
						custom deluge script
						(
											disable order_date_time;
						)
					}
				}

			}
			Disable_Form_To_Edit as "Disable Form To Edit"
			{
				type =  form
				form = Online_Customer_Orders
				record event = on edit

				on load
				{
					actions 
					{
						custom deluge script
						(
											if(input.ID != null)
										{
											// נועל שדות בטופס הראשי
											disable customer_name;
											disable delivery;
											disable total_order_price;
											disable customer_phone;
											disable total_order_price;
											disable customer_address;
											disable received_order_date_time;
										}
						)
					}
				}

			}
			Cancel_Submit_If_Edit as "Cancel Submit If Edit"
			{
				type =  form
				form = Online_Customer_Orders
				record event = on edit

				on validate
				{
					actions 
					{
						custom deluge script
						(
											alert "This order has already been submitted and cannot be edited";
										cancel submit;
						)
					}
				}

			}
			Cancel_Submit_If_Edit1 as "Cancel Submit If Edit"
			{
				type =  form
				form = In_Place_Customer_Orders
				record event = on edit

				on validate
				{
					actions 
					{
						custom deluge script
						(
											alert "This order has already been submitted and cannot be edited";
										cancel submit;
						)
					}
				}

			}
			Disable_Form_To_Edit1 as "Disable Form To Edit"
			{
				type =  form
				form = In_Place_Customer_Orders
				record event = on edit

				on load
				{
					actions 
					{
						custom deluge script
						(
											disable customer_phone;
										disable customer_name;
										disable customer_address;
										disable discount;
										disable total_order_price;
										disable order_date_time;
										disable delivery;
										disable order_received_date_time;
						)
					}
				}

			}
			Reset_After_MenuItem_Remo as "Reset After MenuItem Remove"
			{
				type =  form
				form = In_Place_Customer_Orders
				record event = on add or edit

				on user input of order_details.menu_item
				{
					actions 
					{
						custom deluge script
						(
											// אם Menu_Item נמחק – מאפסים את שאר השדות בשורה
										if(row.menu_item == null)
										{
											row.quantity=null;
											row.unit_price=null;
											row.total_price_per_item=null;
										}
						)
					}
				}

			}
			Disable_editing_after_1_h1 as "Disable editing after 1 hour"
			{
				type =  form
				form = Suppliers_Orders
				record event = on edit

				on validate
				{
					actions 
					{
						custom deluge script
						(
											if(input.ID != null && input.order_date_time != null)
										{
											// מחשב את הזמן שעבר בין עכשיו לזמן ההזמנה
											time_diff = input.order_date_time.timeBetween(zoho.currenttime);
											// מחזיר "HH:mm:ss"
											parts = time_diff.toList(":");
											// [hours, minutes, seconds]
											// המרה למספרים
											hours = parts.get(0).toLong();
											minutes = parts.get(1).toLong();
											total_minutes = hours * 60 + minutes;
											// בדיקה אם עברו יותר מ-60 דקות
											if(total_minutes > 60)
											{
												alert "This supplier order was created more than an hour ago and cannot be edited.";
												cancel submit;
											}
										}
						)
					}
				}

			}
			hide_order_received_Credi as "hide order received & Credit"
			{
				type =  form
				form = In_Place_Customer_Orders
				record event = on add or edit

				on load
				{
					actions 
					{
						custom deluge script
						(
											hide order_received;
										hide credit_card_number;
						)
					}
				}

			}
			hide_order_received1 as "hide order received"
			{
				type =  form
				form = Online_Customer_Orders
				record event = on add or edit

				on load
				{
					actions 
					{
						custom deluge script
						(
											hide order_received_box_online;
						)
					}
				}

			}
			Hide_Emplyee_Type_In_Shif as "Hide Emplyee Type In Shifts Sub-Form"
			{
				type =  form
				form = Employees
				record event = on add or edit

				on load
				{
					actions 
					{
						custom deluge script
						(
											hide shifts.employee_type;
										// replace with your exact link-names (subform.field)
						)
					}
				}

			}
			Email_customer_order_conf as "Email customer order confirmation"
			{
				type =  form
				form = Online_Customer_Orders
				record event = on add

				on success
				{
					actions 
					{
						custom deluge script
						(
											// Build rows for the items table
										items_rows = "";
										for each  line in input.order_details
										{
											item_name = line.menu_item.item_name;
											qty = line.quantity;
											price = line.unit_price;
											line_total = qty * price;
											items_rows = items_rows + "<tr>" + "<td style='padding:8px;border-bottom:1px solid #eee;'>" + item_name + "</td>" + "<td style='padding:8px;text-align:center;border-bottom:1px solid #eee;'>" + qty + "</td>" + "<td style='padding:8px;text-align:right;border-bottom:1px solid #eee;'>" + price + "</td>" + "<td style='padding:8px;text-align:right;border-bottom:1px solid #eee;'>" + line_total + "</td>" + "</tr>";
										}
										// Delivery fee row (if the checkbox is checked)
										delivery_fee = 0.0;
										if(input.delivery == true)
										{
											delivery_fee = 15.0;
											items_rows = items_rows + "<tr>" + "<td style='padding:8px;border-bottom:1px solid #eee;'><i>Delivery</i></td>" + "<td style='padding:8px;text-align:center;border-bottom:1px solid #eee;'>1</td>" + "<td style='padding:8px;text-align:right;border-bottom:1px solid #eee;'>" + delivery_fee + "</td>" + "<td style='padding:8px;text-align:right;border-bottom:1px solid #eee;'>" + delivery_fee + "</td>" + "</tr>";
										}
										// Total shown in the email (adjust if your DB already includes delivery)
										order_total = ifnull(input.total_order_price,0.0) + delivery_fee;
										// Simple, table-based HTML (keeps Gmail from trimming)
										html_body = "<table role='presentation' width='100%' cellpadding='0' cellspacing='0' style='font-family:Arial,Helvetica,sans-serif;font-size:14px;color:#222;background:#ffffff;'>" + "<tr>" + "<td style='padding:16px;border-bottom:1px solid #eee;'>" + "<div style='font-size:18px;font-weight:700;color:#111;'>Order Confirmation</div>" + "<div style='margin-top:6px;'>Dear " + input.customer_name + ",</div>" + "</td>" + "</tr>" + "<tr><td style='padding:16px;'>Thank you for your online order. We’ve received it and it’s now being processed.</td></tr>" + "<tr><td style='padding:0 16px 16px 16px;'>" + "<table width='100%' cellpadding='0' cellspacing='0' style='border-collapse:collapse;border:1px solid #eee;'>" + "<thead>" + "<tr style='background:#f9fafb;'>" + "<th align='left'  style='padding:10px;border-bottom:1px solid #eee;font-weight:600;'>Item</th>" + "<th align='center' style='padding:10px;border-bottom:1px solid #eee;font-weight:600;width:80px;'>Qty</th>" + "<th align='right' style='padding:10px;border-bottom:1px solid #eee;font-weight:600;width:120px;'>Unit Price</th>" + "<th align='right' style='padding:10px;border-bottom:1px solid #eee;font-weight:600;width:120px;'>Line Total</th>" + "</tr>" + "</thead>" + "<tbody>" + items_rows + "</tbody>" + "</table>" + "</td></tr>" + "<tr>" + "<td align='right' style='padding:12px 16px;'>" + "<div style='display:inline-block;padding:10px 14px;border:1px solid #eee;border-radius:6px;'>" + "<strong style='margin-right:8px;'>Total:</strong>" + "<span>" + order_total + "</span>" + "</div>" + "</td>" + "</tr>" + "<tr><td style='padding:16px;'>We look forward to serving you again!<br/>Best regards, CANN Pizzeria Team</td></tr>" + "</table>";
										// Unique subject so Gmail doesn't thread/trim
										subject_line = "Order Confirmation To " + input.customer_name;
										// Send the email
										sendmail
										[
											from :zoho.adminuserid
											to :input.customer_email
											subject :subject_line
											message :html_body
										]
						)
					}
				}

			}
			Lock_after_delivery as "Lock after delivery"
			{
				type =  form
				form = Suppliers_Orders
				record event = on edit

				on load
				{
					actions 
					{
						custom deluge script
						(
											if(input.order_received == True)
										{
											disable supplier;
											disable order_date_time;
											disable arrival_date_time;
											disable order_details.product;
											disable order_details.quantity;
											disable order_details.unit_price;
											disable order_details.total_price_per_product;
											disable total_order_price;
										}
						)
					}
				}

			}
			Disable_editing_after_del as "Disable editing after delivered"
			{
				type =  form
				form = Suppliers_Orders
				record event = on edit

				on validate
				{
					actions 
					{
						custom deluge script
						(
											if(input.order_received == True)
										{
											alert "This order has already been delivered and cannot be edited";
											cancel submit;
										}
						)
					}
				}

			}
			Update_total_price_on_row1 as "Update total price on row deletion"
			{
				type =  form
				form = Online_Customer_Orders
				record event = on add or edit

				on delete row of order_details
				{
					actions 
					{
						custom deluge script
						(
											// On Delete Row (subform)
										input.total_order_price = round(max(0.0,ifnull(input.total_order_price,0.0) - ifnull(row.total_price_per_item,0.0)),2);
						)
					}
				}

			}
			Disable_total_price_field as "Disable total price field"
			{
				type =  form
				form = Suppliers_Orders
				record event = on add or edit

				on load
				{
					actions 
					{
						custom deluge script
						(
											disable total_order_price;
										disable order_details.unit_price;
										disable order_details.total_price_per_product;
						)
					}
				}

			}
			Filter_Available_Employee as "Filter Available Employees"
			{
				type =  form
				form = Shifts
				record event = on add or edit

				on add row of shift_assigments
				{
					actions 
					{
						custom deluge script
						(
											/********************************************************************
										 Shifts → shift_assigments (subform)
										 Event: On add row
										 Goal: show only employees who are active, not absent for this
										       date+shift-type, and not already picked in this shift.
										********************************************************************/
										// 1) Require date & shift-type on the parent form
										if(input.shift_date == null || input.shifts_type == null)
										{
											alert "Pick the shift date and shift type first.";
											return;
										}
										// 2) Build a set of employees absent on this date & shift-type
										theDate = input.shift_date;
										shiftTypeRec = input.shifts_type;
										// record pointer to Shifts_Types
										absences = Employees_Absences[absence_date == theDate && shifts_types.contains(shiftTypeRec)];
										absentEmp = List();
										for each  a in absences
										{
											if(a.employee != null)
											{
												absentEmp.add(a.employee);
												// a.employee is the Employees record (ID)
											}
										}
										// 3) Build a set of employees already assigned in this same shift
										alreadyPicked = List();
										for each  line in input.shift_assigments
										{
											if(line.employee != null)
											{
												alreadyPicked.add(line.employee);
											}
										}
										// 4) Allowed = active employees NOT absent and NOT already picked
										allowed = List();
										for each  emp in Employees[is_active == true]
										{
											if(!absentEmp.contains(emp) && !alreadyPicked.contains(emp))
											{
												allowed.add(emp);
											}
										}
										// 5) Populate the picklist
										if(allowed.size() == 0)
										{
											alert "No available employees for this date & shift.";
										}
										row.employee:ui.add(allowed);
						)
					}
				}

			}
			Filter_Available_Employee1 as "Filter Available Employees"
			{
				type =  form
				form = Shifts
				record event = on add or edit

				on user input of shifts_type
				{
					actions 
					{
						custom deluge script
						(
											/* Refilter Employees in all subform rows when date/type changes */
										// 1) Require both fields
										if(input.shift_date == null || input.shifts_type == null)
										{
											// clear UI lists if needed
											for each  r in input.shift_assigments
											{
												r.employee=null;
												r.employee:ui.add(List());
											}
											return;
										}
										// 2) Who is absent on this date+type?
										theDate = input.shift_date;
										typeRec = input.shifts_type;
										// lookup to Shifts_Types
										absences = Employees_Absences[absence_date == theDate && shifts_types.contains(typeRec)];
										absentEmp = List();
										for each  a in absences
										{
											if(a.employee != null)
											{
												absentEmp.add(a.employee);
											}
										}
										// 3) Who is already picked (across all rows)?
										picked = List();
										for each  r in input.shift_assigments
										{
											if(r.employee != null)
											{
												picked.add(r.employee);
											}
										}
										// 4) For each row: allowed = active − absent − (picked minus itself)
										for each  r in input.shift_assigments
										{
											// build picked-excluding-this-row
											pickedExcl = List();
											for each  p in picked
											{
												if(r.employee == null || p != r.employee)
												{
													pickedExcl.add(p);
												}
											}
											allowed = List();
											for each  emp in Employees[is_active == true]
											{
												if(!absentEmp.contains(emp) && !pickedExcl.contains(emp))
												{
													allowed.add(emp);
												}
											}
											// If current selection is no longer valid, clear it
											if(r.employee != null && !allowed.contains(r.employee))
											{
												r.employee=null;
											}
											// refresh UI options
											r.employee:ui.add(List());
											// soft reset (prevents stale options)
											r.employee:ui.add(allowed);
										}
						)
					}
				}

			}
			Update_total_price_on_row2 as "Update total price on row deletion"
			{
				type =  form
				form = In_Place_Customer_Orders
				record event = on add or edit

				on delete row of order_details
				{
					actions 
					{
						custom deluge script
						(
											if(discount == null)
										{
											input.total_order_price = round(max(0.0,ifnull(input.total_order_price,0.0) - ifnull(row.total_price_per_item,0.0)),2);
										}
										else if(row.menu_item != null)
										{
											ToRemove = row.total_price_per_item * (100 - input.discount) / 100;
											input.total_order_price = input.total_order_price - ToRemove;
										}
						)
					}
				}

			}
			Update_Unit_Price_On_And_2 as "Update Unit Price On And Total Price (Menu Item)"
			{
				type =  form
				form = In_Place_Customer_Orders
				record event = on add or edit

				on user input of order_details.menu_item
				{
					actions 
					{
						custom deluge script
						(
											// 1) When a menu item is chosen, pull its price; if cleared, reset row prices
										if(row.menu_item != null)
										{
											menu_item_record = Menu[ID == row.menu_item];
											if(menu_item_record.count() > 0)
											{
												row.unit_price=menu_item_record.item_price;
											}
										}
										else
										{
											row.unit_price=null;
											row.total_price_per_item=null;
										}
										// 2) Compute row total if both quantity and unit_price exist
										if(row.quantity != null && row.unit_price != null)
										{
											row.total_price_per_item=row.quantity * row.unit_price;
										}
										else
										{
											// If one is missing, keep this row’s total empty so order sum won’t include it
											row.total_price_per_item=null;
										}
										// 3) Recalculate full order total from all subform lines
										total_amount = 0.0;
										for each  line_item in input.order_details
										{
											if(line_item.total_price_per_item != null && line_item.total_price_per_item > 0)
											{
												total_amount = total_amount + line_item.total_price_per_item;
											}
										}
										// Apply discount if exists
										if(input.discount != null && input.discount > 0)
										{
											discount_value = (total_amount * input.discount) / 100;
											total_amount = total_amount - discount_value;
										}
										// 4) Add delivery charge if checked
										if(input.delivery == true)
										{
											total_amount = total_amount + 15;
										}
										// 5) Update order total
										input.total_order_price = total_amount;
						)
					}
				}

			}
			Update_Unit_Price_On_And_3 as "Update Unit Price On And Total Price (Quantity)"
			{
				type =  form
				form = In_Place_Customer_Orders
				record event = on add or edit

				on user input of order_details.quantity
				{
					actions 
					{
						custom deluge script
						(
											// Orders → order_details (subform) → quantity → On User Input
										// 0) If quantity is empty: clear the row total and recalc order total, then exit
										if(row.quantity == null)
										{
											row.total_price_per_item=null;
											// Recalculate order total from all lines
											total_amount = 0.0;
											for each  line_item in input.order_details
											{
												if(line_item.total_price_per_item != null && line_item.total_price_per_item > 0)
												{
													total_amount = total_amount + line_item.total_price_per_item;
												}
											}
											// Add delivery fee if checked
											if(input.delivery == true)
											{
												total_amount = total_amount + 15;
											}
											input.total_order_price = total_amount;
											return;
										}
										// 1) Cap requested quantity by available stock (based on Recipes + Inventory)
										if(row.menu_item != null)
										{
											recipe_rows = Recipes[item == row.menu_item];
											min_possible = null;
											for each  recipe in recipe_rows
											{
												ingredient = Inventory[ID == recipe.product];
												if(ingredient.count() > 0 && recipe.quantity > 0)
												{
													possible_by_this_ingredient = floor(ingredient.current_stock / recipe.quantity);
													if(min_possible == null || possible_by_this_ingredient < min_possible)
													{
														min_possible = possible_by_this_ingredient;
													}
												}
												else
												{
													min_possible = 0;
													break;
												}
											}
											if(min_possible != null && row.quantity > min_possible)
											{
												alert "You requested " + row.quantity + " units. The maximum available from stock is " + min_possible + ". The quantity has been updated automatically.";
												row.quantity=min_possible;
											}
										}
										// 2) Recompute row total (only if we have a price)
										if(row.unit_price != null)
										{
											row.total_price_per_item=row.quantity * row.unit_price;
										}
										else
										{
											row.total_price_per_item=null;
										}
										// 3) Recalculate total order price from subform
										total_amount = 0.0;
										for each  line_item in input.order_details
										{
											if(line_item.total_price_per_item != null && line_item.total_price_per_item > 0)
											{
												total_amount = total_amount + line_item.total_price_per_item;
											}
										}
										// Apply discount if exists
										if(input.discount != null && input.discount > 0)
										{
											discount_value = (total_amount * input.discount) / 100;
											total_amount = total_amount - discount_value;
										}
										// 4) Add delivery fee if delivery is checked
										if(input.delivery == true)
										{
											total_amount = total_amount + 15;
										}
										// 5) Update total order price
										input.total_order_price = total_amount;
						)
					}
				}

			}
			Filter_Available_Employee2 as "Filter Available Employees"
			{
				type =  form
				form = Shifts
				record event = on add or edit

				on user input of shift_date
				{
					actions 
					{
						custom deluge script
						(
											/* Refilter Employees in all subform rows when date/type changes */
										// 1) Require both fields
										if(input.shift_date == null || input.shifts_type == null)
										{
											// clear UI lists if needed
											for each  r in input.shift_assigments
											{
												r.employee=null;
												r.employee:ui.add(List());
											}
											return;
										}
										// 2) Who is absent on this date+type?
										theDate = input.shift_date;
										typeRec = input.shifts_type;
										// lookup to Shifts_Types
										absences = Employees_Absences[absence_date == theDate && shifts_types.contains(typeRec)];
										absentEmp = List();
										for each  a in absences
										{
											if(a.employee != null)
											{
												absentEmp.add(a.employee);
											}
										}
										// 3) Who is already picked (across all rows)?
										picked = List();
										for each  r in input.shift_assigments
										{
											if(r.employee != null)
											{
												picked.add(r.employee);
											}
										}
										// 4) For each row: allowed = active − absent − (picked minus itself)
										for each  r in input.shift_assigments
										{
											// build picked-excluding-this-row
											pickedExcl = List();
											for each  p in picked
											{
												if(r.employee == null || p != r.employee)
												{
													pickedExcl.add(p);
												}
											}
											allowed = List();
											for each  emp in Employees[is_active == true]
											{
												if(!absentEmp.contains(emp) && !pickedExcl.contains(emp))
												{
													allowed.add(emp);
												}
											}
											// If current selection is no longer valid, clear it
											if(r.employee != null && !allowed.contains(r.employee))
											{
												r.employee=null;
											}
											// refresh UI options
											r.employee:ui.add(List());
											// soft reset (prevents stale options)
											r.employee:ui.add(allowed);
										}
						)
					}
				}

			}
			Message_for_succsesfull_o as "Message for succsesfull order"
			{
				type =  form
				form = In_Place_Customer_Orders
				record event = on add or edit

				on success
				{
					actions 
					{
						custom deluge script
						(
											success message "Order Received Successfully";
						)
					}
				}

			}
			Success_Message_Order_Rec as "Success Message Order Received Successfully"
			{
				type =  form
				form = Online_Customer_Orders
				record event = on add or edit

				on success
				{
					actions 
					{
						custom deluge script
						(
											success message "Order Received Successfully";
						)
					}
				}

			}
			Validate_required_fields as "Validate required fields"
			{
				type =  form
				form = Suppliers_Orders
				record event = on add or edit

				on validate
				{
					actions 
					{
						custom deluge script
						(
											errors = List();
										// 1) Supplier on main form
										if(input.supplier == null)
										{
											errors.add("Please select a supplier.");
										}
										// 2) At least one line in the subform
										if(input.order_details == null || input.order_details.isEmpty())
										{
											errors.add("Please add at least one product line.");
										}
										else
										{
											// 3) Validate each row: product + quantity > 0
											idx = 1;
											for each  row in input.order_details
											{
												if(row.product == null)
												{
													errors.add("Row " + idx + ": Product is required.");
												}
												if(row.quantity == null)
												{
													errors.add("Row " + idx + ": Quantity is required.");
												}
												else if(row.quantity <= 0)
												{
													errors.add("Row " + idx + ": Quantity must be greater than zero.");
												}
												idx = idx + 1;
											}
										}
										// If any errors → stop saving
										if(errors.size() > 0)
										{
											alert "Cannot save this supplier order:\n\n" + errors.toString("\n");
											cancel submit;
										}
						)
					}
				}

			}
			Alert_Cannot_Be_Edited as "Alert Cannot Be Edited"
			{
				type =  form
				form = In_Place_Customer_Orders
				record event = on edit

				on load
				{
					actions 
					{
						custom deluge script
						(
											alert "This order has already been completed and cannot be edited";
						)
					}
				}

			}
			Disable_Fields as "Disable Fields"
			{
				type =  form
				form = In_Place_Customer_Orders
				record event = on add or edit

				on load
				{
					actions 
					{
						custom deluge script
						(
											disable total_order_price;
										disable order_details.unit_price;
										disable order_details.total_price_per_item;
										disable order_received_date_time;
						)
					}
				}

			}
			Disable_Fields1 as "Disable Fields"
			{
				type =  form
				form = Online_Customer_Orders
				record event = on add or edit

				on load
				{
					actions 
					{
						custom deluge script
						(
											disable total_order_price;
										disable order_details.unit_price;
										disable order_details.total_price_per_item;
										disable received_order_date_time;
						)
					}
				}

			}
			Show_Credit_if_Delivery_C as "Show Credit if Delivery Checked"
			{
				type =  form
				form = In_Place_Customer_Orders
				record event = on add or edit

				on user input of delivery
				{
					actions 
					{
						custom deluge script
						(
											if(delivery == True)
										{
											show credit_card_number;
										}
										else if(delivery == False)
										{
											hide credit_card_number;
										}
						)
					}
				}

			}
			Validate_Requierd_Fields as "Validate Requierd Fields"
			{
				type =  form
				form = In_Place_Customer_Orders
				record event = on add or edit

				on validate
				{
					actions 
					{
						custom deluge script
						(
											errors = List();
										// 1) Supplier on main form
										if(input.customer_phone == null)
										{
											errors.add("Please select a Customer.");
										}
										// 2) At least one line in the subform
										if(input.order_details == null || input.order_details.isEmpty())
										{
											errors.add("Please add at least one product line.");
										}
										else
										{
											// 3) Validate each row: product + quantity > 0
											idx = 1;
											for each  row in input.order_details
											{
												if(row.menu_item == null)
												{
													errors.add("Row " + idx + ": Menu Item is required.");
												}
												if(row.quantity == null)
												{
													errors.add("Row " + idx + ": Quantity is required.");
												}
												else if(row.quantity <= 0)
												{
													errors.add("Row " + idx + ": Quantity must be greater than zero.");
												}
												idx = idx + 1;
											}
										}
										// If any errors → stop saving
										if(errors.size() > 0)
										{
											alert "Cannot save this customer order:\n\n" + errors.toString("\n");
											cancel submit;
										}
						)
					}
				}

			}
			Validate_Requierd_Fields1 as "Validate Requierd Fields"
			{
				type =  form
				form = Online_Customer_Orders
				record event = on add or edit

				on validate
				{
					actions 
					{
						custom deluge script
						(
											errors = List();
										// 1) Supplier on main form
										if(input.customer_phone == null)
										{
											errors.add("Please select a Customer.");
										}
										// 2) At least one line in the subform
										if(input.order_details == null || input.order_details.isEmpty())
										{
											errors.add("Please add at least one product line.");
										}
										else
										{
											// 3) Validate each row: product + quantity > 0
											idx = 1;
											for each  row in input.order_details
											{
												if(row.menu_item == null)
												{
													errors.add("Row " + idx + ": Menu Item is required.");
												}
												if(row.quantity == null)
												{
													errors.add("Row " + idx + ": Quantity is required.");
												}
												else if(row.quantity <= 0)
												{
													errors.add("Row " + idx + ": Quantity must be greater than zero.");
												}
												idx = idx + 1;
											}
										}
										// If any errors → stop saving
										if(errors.size() > 0)
										{
											alert "Cannot save this supplier order:\n\n" + errors.toString("\n");
											cancel submit;
										}
						)
					}
				}

			}
			validate_credit_card_numb as "validate credit card number"
			{
				type =  form
				form = In_Place_Customer_Orders
				record event = on add or edit

				on validate
				{
					actions 
					{
						custom deluge script
						(
											cc = input.credit_card_number;
										// Check if delivery is selected and card number is empty
										if(input.delivery == true && cc == null)
										{
											info "Card number can not be empty if delivery is selected.";
											cancel submit;
										}
										// Validate 16-digit range (only if card number is not empty)
										if(cc != null && cc < 1000000000000000 || cc > 9999999999999999)
										{
											info "Card number must be a 16-digit number (numbers only).";
											cancel submit;
										}
						)
					}
				}

			}
			validate_credit_card_numb1 as "validate credit card number"
			{
				type =  form
				form = Online_Customer_Orders
				record event = on add or edit

				on validate
				{
					actions 
					{
						custom deluge script
						(
											cc = input.credit_card_number;
										// must be between 10^15 and (10^16 - 1)
										if(cc < 1000000000000000 || cc > 9999999999999999)
										{
											alert "Card number must be a 16-digit number (numbers only).";
											cancel submit;
										}
						)
					}
				}

			}
			disable_fields2 as "disable fields"
			{
				type =  form
				form = Shifts
				record event = on add or edit

				on load
				{
					actions 
					{
						custom deluge script
						(
											disable cleanings_needed_num;
										disable delivery_driver_needed_num;
										disable cooks_needed_num;
										disable line_workers_needed_num;
										disable shift_start_time;
										disable shift_end_time;
						)
					}
				}

			}
			hide_orders_history_subfo as "hide orders history subform"
			{
				type =  form
				form = Customers
				record event = on add or edit

				on load
				{
					actions 
					{
						custom deluge script
						(
											hide orders_history;
						)
					}
				}

			}
			validate_delivery_address as "validate delivery address"
			{
				type =  form
				form = Online_Customer_Orders
				record event = on add or edit

				on validate
				{
					actions 
					{
						custom deluge script
						(
											// Check if delivery is selected and customer address is empty
										if(input.delivery == true)
										{
											if(input.customer_address.isEmpty() == true)
											{
												alert "customer address can not be empty if delivery is selected.";
												cancel submit;
											}
										}
						)
					}
				}

			}
			Disable_Returning_Custome as "Disable Returning Customer Field"
			{
				type =  form
				form = Customers
				record event = on add or edit

				on load
				{
					actions 
					{
						custom deluge script
						(
											hide returning_customer;
						)
					}
				}

			}
		}

		schedule
		{
			Calc_Monthly_Salary as "Calc Monthly Salary"
			{
				type =  schedule
				start = "2025-08-01 08:00:00"
				frequency = monthly
				time zone = "Asia/Jerusalem"
				on start
				{
					actions 
					{
					on load
					(
						/********************************************************************
										 Function  : Monthly_Payroll_ByShiftType
										 Schedule  : 1st of every month @ 08:00
										 Forms (link-names must match):
										   employees           – salary_per_hour
										   shifts              – shift_date, shifts_type (lookup)
										   shifts_types        – start_time, end_time
										   shift_assigments    – employee (lookup), shift_id (lookup to shifts)
										   financial_records   – added_user, record_date_time (Date-Time),
										                         record_type, amount, employee (lookup)
										********************************************************************/
										/* ---------- 1. Previous-month date window ---------- */
										runDT = zoho.currenttime;
										// e.g. 01-Sep-2025 08:00
										runDate = runDT.toDate();
										// 01-Sep-2025
										firstPrev = runDate.addMonth(-1);
										// 01-Aug-2025
										lastPrev = runDate.addDay(-1);
										// 31-Aug-2025
										/* ---------- 2. Pre-compute hours per Shift Type ---------- */
										typeIDs = list();
										// parallel lists
										typeHours = list();
										// hours per shift type
										allTypes = Shifts_Types[ID != 0];
										// every shift type record
										for each  st in allTypes
										{
											if(st.start_time != null && st.end_time != null)
											{
												/* get H:M from the TIME fields */
												sh = st.start_time.getHour();
												// 0-23
												sm = st.start_time.getMinutes();
												// 0-59
												eh = st.end_time.getHour();
												em = st.end_time.getMinutes();
												/* convert to minutes since midnight */
												startMin = sh * 60 + sm;
												endMin = eh * 60 + em;
												/* handle overnight shift types */
												if(endMin < startMin)
												{
													endMin = endMin + 24 * 60;
													// push to next day
												}
												/* duration in decimal hours */
												hoursVal = (endMin - startMin) / 60.0;
												/* add to the parallel lists */
												typeIDs.add(st.ID);
												typeHours.add(hoursVal);
											}
										}
										/* ---------- 3. Process each employee ---------- */
										emps = Employees[ID != 0];
										// all employees
										for each  emp in emps
										{
											if(emp.hourly_rate == null)
											{
												// skip if no hourly rate
												continue;
											}
											totalHrs = 0.0;
											/* 3a. Fetch this emp’s assignments last month */
											assigns = Shifts_Assigments[employee == emp && shift.shift_date >= firstPrev && shift.shift_date <= lastPrev];
											/* 3b. Add fixed hours per assignment */
											for each  row in assigns
											{
												stypeID = row.shift.shifts_type;
												// Shift Type record ID
												pos = typeIDs.indexOf(stypeID);
												if(pos != -1)
												{
													totalHrs = totalHrs + typeHours.get(pos);
												}
											}
											/* 3c. Compute payroll */
											payAmount = (totalHrs * emp.hourly_rate).round(2);
											if(payAmount > 0)
											{
												insert into Finance_Records
												[
													Added_User=zoho.loginuser
													record_date_time=runDT
													record_type_text="Payroll to - " + emp.employee_name
													amount=payAmount * -1
													record_type_dropdown="Payroll"
												]
											}
										}
					)
					}
				}
			}
			Send_Employee_Roster_For_ as "Send Employee Roster For The Week"
			{
				type =  schedule
				start = "2025-08-09 20:30:00"
				frequency = weekly
				time zone = "Asia/Jerusalem"
				on start
				{
					actions 
					{
					on load
					(
						/*****  Scheduler: Weekly ▸ Saturday  ****************************************/
										/*  Sends next-week roster as a simple HTML table (Sun-Thu).                */
										/****************************************************************************/
										today = zoho.currenttime;
										// script runs on Saturday
										start_date = today.addDay(0);
										// coming Sunday
										end_date = start_date.addDay(4);
										// Thursday
										// fetch & sort shifts -------------------------------------------------------
										week_shifts = Shifts[shift_date >= start_date && shift_date <= end_date];
										// build HTML roster ---------------------------------------------------------
										roster = "<h3 style='margin-bottom:8px;'>Roster " + start_date.toString("dd-MMM") + " – " + end_date.toString("dd-MMM") + "</h3>" + "<table border='1' cellspacing='0' cellpadding='4' " + "style='border-collapse:collapse;font-family:Arial;font-size:14px;'>" + "<tr style='background:#efefef;font-weight:bold;'>" + "<td>Date</td><td>Shift</td><td>Time</td><td>Employees</td></tr>";
										for each  sh in week_shifts
										{
											// ----- employee names --------------------------------------------------
											names = "";
											for each  ln in sh.shift_assigments
											{
												// sub-form link-name
												if(ln.employee != null)
												{
													names = names + ln.employee.employee_name + ", ";
												}
											}
											if(names != "")
											{
												names = names.subString(0,names.length() - 2);
												// trim trailing “, ”
											}
											else
											{
												names = "no one assigned";
											}
											// ----- shift-type text -------------------------------------------------
											shift_type_name = "-";
											if(sh.shifts_type != null)
											{
												shift_type_name = sh.shifts_type.shift_type;
												// text field in Shifts_Types
											}
											// ----- one table row ---------------------------------------------------
											timeRange = sh.shift_start_time.toString() + "-" + sh.shift_end_time.toString();
											roster = roster + "<tr><td>" + sh.shift_date.toString("dd-MMM") + "</td>" + "<td>" + shift_type_name + "</td>" + "<td>" + timeRange + "</td>" + "<td>" + names + "</td></tr>";
										}
										roster = roster + "</table>";
										// collect active employees with e-mail --------------------------------------
										to_list = Employees[is_active == true && employee_email != null && employee_email != ""].employee_email.getAll();
										/* ---------- send the e-mail ---------------------------------- */
										if(to_list.size() > 0)
										{
											subject_line = "Roster | " + start_date.toString("dd-MMM") + " – " + end_date.toString("dd-MMM");
											sendmail
											[
												from :zoho.adminuserid
												to :to_list
												subject :subject_line
												message :roster
											]
										}
										else
										{
											info "No active employees with an e-mail address – roster not sent.";
										}
					)
					}
				}
			}
		}




		functions
		{
			Update_Inventory_from_Sup as "Update Inventory from Supplier Order"
			{
				type =  functions
				form = Suppliers_Orders
				execution type = for each record	
				on start
				{
					actions 
					{
					on click
					(
						input.order_received = True;
										// שליפת רשומת ההזמנה הנוכחית
										order = Suppliers_Orders[ID == input.ID];
										// שליפת כל השורות שבסאבפורם
										order_rows = Suppliers_Orders_Details[suppliers_order_number == order.ID];
										// עבור כל שורה נעדכן מלאי
										for each  row in order_rows
										{
											if(row.product != null && row.quantity != null)
											{
												inv = Inventory[ID == row.product];
												if(inv.count() > 0)
												{
													inv.current_stock=ifnull(inv.current_stock,0) + row.quantity;
												}
											}
										}
										//עדכון תאריך ושעת הגעת ההזמנה
										order.arrival_date_time=zoho.currenttime;
										insert into Finance_Records
										[
											record_date_time=input.order_date_time
											record_type_text="supplier order" + " - " + input.supplier.supplier_name
											amount=input.total_order_price * -1
											Added_User=zoho.loginuser
											suppliers_orders=input.ID
											record_type_dropdown="Supplier order"
										]
										info "Order is completed. A new financial record is created. Inventory successfully updated";
					)
					}
				}
			}
			In_place_customer_order_r as "In place customer order received"
			{
				type =  functions
				form = In_Place_Customer_Orders
				execution type = for each record	
				on start
				{
					actions 
					{
					on click
					(
						input.order_received = True;
										input.order_received_date_time = zoho.currenttime;
										insert into Finance_Records
										[
											record_date_time=input.order_date_time
											record_type_text="in place customer orders" + " - " + input.customer_name
											amount=input.total_order_price
											Added_User=zoho.loginuser
											in_place_customer_orders=input.ID
											record_type_dropdown="Customer order - in place"
										]
										info "Order is completed. A new financial record is created";
					)
					}
				}
			}
			online_customer_order_rec as "online customer order recieved"
			{
				type =  functions
				form = Online_Customer_Orders
				execution type = for each record	
				on start
				{
					actions 
					{
					on click
					(
						input.order_received_box_online = True;
										input.received_order_date_time = zoho.currenttime;
										insert into Finance_Records
										[
											record_date_time=input.order_date_time
											record_type_text="online customer orders" + " - " + input.customer_name
											amount=input.total_order_price
											Added_User=zoho.loginuser
											online_customer_orders=input.ID
											record_type_dropdown="Customer order - online"
										]
										info "Order is completed. A new financial record is created";
					)
					}
				}
			}
			Duplicate_Supplier_Order as "Duplicate Supplier Order"
			{
				type =  functions
				form = Suppliers_Orders
				execution type = for each record	
				on start
				{
					actions 
					{
					on click
					(
						// מקבל את הרשומה המקורית
										orig = Suppliers_Orders[ID == input.ID];
										// יוצר רשומת הזמנה חדשה עם ערכים רלוונטיים, אבל מאפס את הסטטוס
										new_order = insert into Suppliers_Orders
										[
											Added_User=zoho.loginuser
											supplier=orig.supplier
											order_date_time=zoho.currenttime
											arrival_date_time=null
											total_order_price=orig.total_order_price
										];
										// מעתיק את שורות ההזמנה לתת־הטופס
										orig_lines = Suppliers_Orders_Details[suppliers_order_number == orig.ID];
										for each  l in orig_lines
										{
											insert into Suppliers_Orders_Details
											[
												supplier=orig.supplier
												suppliers_order_number=new_order
												product=l.product
												unit_price=l.unit_price
												quantity=l.quantity
												total_price_per_product=l.total_price_per_product
												Added_User=zoho.loginuser
											]
										}
					)
					}
				}
			}
		}
	}
	share_settings
	{
			"Administrator"
			{
				name = "Administrator"
				type = Users_Permissions
				permissions = {Chat:true, Predefined:true, ApiAccess:true, PIIAccess:true, ePHIAccess:true}
				description = "This profile will have all the permissions.\n"
			}
			"Employee"
			{
				name = "Employee"
				type = Users_Permissions
				permissions = {Chat:false, Predefined:false, ApiAccess:true, PIIAccess:true, ePHIAccess:true}
				description = "Employee Profile\n"
				ModulePermissions
				{
					Suppliers_Orders_Details
					{
						allFieldsVisible= true 
					}
					Shifts_Types
					{
						allFieldsVisible= true 
					}
					Suppliers_Orders
					{
						allFieldsVisible= true 
						ReportPermissions
						{
							Suppliers_Orders_Report={"View"}
						}
					}
					Online_Customer_Orders_Details
					{
						allFieldsVisible= true 
					}
					Employees
					{
						allFieldsVisible= true 
					}
					Shifts_Assigments
					{
						allFieldsVisible= true 
					}
					Finance_Records
					{
						allFieldsVisible= true 
					}
					Suppliers
					{
						allFieldsVisible= true 
					}
					Employees_Absences
					{
						enabled= Create,Tab 
						allFieldsVisible= true 
						ReportPermissions
						{
							Employees_Absences_Report={"View"}
						}
					}
					Online_Customer_Orders
					{
						enabled= Create,Viewall,Import,Export,Tab,read_comm,write_comm 
						allFieldsVisible= true 
						ReportPermissions
						{
							Customer_Orders_Online_Report={"View","Edit","Delete"}
						}
					}
					Customers
					{
						allFieldsVisible= true 
					}
					In_Place_Customer_Orders
					{
						enabled= Create,Viewall,Import,Export,Tab,read_comm,write_comm 
						allFieldsVisible= true 
						ReportPermissions
						{
							Orders_In_Place_Report={"View","Edit","Delete"}
						}
					}
					Suppliers_Products
					{
						allFieldsVisible= true 
					}
					Recipes
					{
						allFieldsVisible= true 
					}
					In_Place_Customer_Orders_Details
					{
						allFieldsVisible= true 
					}
					Menu
					{
						enabled= Create,Tab 
						allFieldsVisible= true 
						ReportPermissions
						{
							All_Menus={"View"}
						}
					}
					Shifts
					{
						allFieldsVisible= true 
						ReportPermissions
						{
							Shifts_Calendar1={"View"}
							All_Shifts={"View"}
						}
					}
					Inventory
					{
						allFieldsVisible= true 
						ReportPermissions
						{
							All_Inventories={"View"}
							Low_Stock_Items={"View"}
						}
					}
				}
			}
			"Online Customer"
			{
				name = "Online Customer"
				type = Users_Permissions
				permissions = {Chat:false, Predefined:false, ApiAccess:true, PIIAccess:true, ePHIAccess:true}
				description = "Online Customer Profile\n"
				ModulePermissions
				{
					Suppliers_Orders_Details
					{
						allFieldsVisible= true 
					}
					Shifts_Types
					{
						allFieldsVisible= true 
					}
					Suppliers_Orders
					{
						allFieldsVisible= true 
					}
					Online_Customer_Orders_Details
					{
						allFieldsVisible= true 
					}
					Employees
					{
						allFieldsVisible= true 
					}
					Shifts_Assigments
					{
						allFieldsVisible= true 
					}
					Finance_Records
					{
						allFieldsVisible= true 
					}
					Suppliers
					{
						allFieldsVisible= true 
					}
					Employees_Absences
					{
						allFieldsVisible= true 
					}
					Online_Customer_Orders
					{
						enabled= Create,Tab 
						allFieldsVisible= true 
					}
					Customers
					{
						allFieldsVisible= true 
					}
					In_Place_Customer_Orders
					{
						allFieldsVisible= true 
					}
					Suppliers_Products
					{
						allFieldsVisible= true 
					}
					Recipes
					{
						allFieldsVisible= true 
					}
					In_Place_Customer_Orders_Details
					{
						allFieldsVisible= true 
					}
					Menu
					{
						allFieldsVisible= true 
						ReportPermissions
						{
							Menu_Report_For_Customers1={"View"}
						}
					}
					Shifts
					{
						allFieldsVisible= true 
					}
					Inventory
					{
						allFieldsVisible= true 
					}
				}
			}
			"Developer"
			{
				name = "Developer"
				type = Developer
				permissions = {Chat:false, Predefined:true, ApiAccess:true, PIIAccess:true, ePHIAccess:true}
				description = "Developer Profile\n"
			}
			"Manager"
			{
				name = "Manager"
				type = Users_Permissions
				permissions = {Chat:false, Predefined:false, ApiAccess:true, PIIAccess:true, ePHIAccess:true}
				description = "Manager Profile\n"
				ModulePermissions
				{
					Suppliers_Orders_Details
					{
						allFieldsVisible= true 
					}
					Shifts_Types
					{
						enabled= Create,Tab 
						allFieldsVisible= true 
						ReportPermissions
						{
							Shifts_Types_Report={"View","Edit","Delete"}
						}
					}
					Suppliers_Orders
					{
						enabled= Create,Tab 
						allFieldsVisible= true 
						ReportPermissions
						{
							Suppliers_Orders_Report={"View","Edit","Delete"}
						}
					}
					Online_Customer_Orders_Details
					{
						allFieldsVisible= true 
					}
					Employees
					{
						enabled= Create,Viewall,Import,Export,Tab,read_comm,write_comm 
						allFieldsVisible= true 
						ReportPermissions
						{
							All_Employees={"View","Edit","Delete"}
						}
					}
					Shifts_Assigments
					{
						allFieldsVisible= true 
					}
					Finance_Records
					{
						enabled= Create,Tab 
						allFieldsVisible= true 
						ReportPermissions
						{
							All_Finance_Records={"View"}
							financial_dashboard={"View"}
						}
					}
					Suppliers
					{
						enabled= Create,Tab 
						allFieldsVisible= true 
						ReportPermissions
						{
							All_Suppliers={"View","Edit","Delete"}
						}
					}
					Employees_Absences
					{
						enabled= Create,Tab 
						allFieldsVisible= true 
						ReportPermissions
						{
							Employees_Absences_Report={"View","Edit","Delete"}
						}
					}
					Online_Customer_Orders
					{
						enabled= Create,Viewall,Import,Export,Tab,read_comm,write_comm 
						allFieldsVisible= true 
						ReportPermissions
						{
							Customer_Orders_Online_Report={"View","Edit","Delete"}
						}
					}
					Customers
					{
						enabled= Create,Viewall,Import,Export,Tab,read_comm,write_comm 
						allFieldsVisible= true 
						ReportPermissions
						{
							All_Customers={"View","Edit","Delete"}
							Customers_Map={"View","Edit","Delete"}
						}
					}
					In_Place_Customer_Orders
					{
						enabled= Create,Viewall,Import,Export,Tab,read_comm,write_comm 
						allFieldsVisible= true 
						ReportPermissions
						{
							Orders_In_Place_Report={"View","Edit","Delete"}
						}
					}
					Suppliers_Products
					{
						allFieldsVisible= true 
					}
					Recipes
					{
						allFieldsVisible= true 
					}
					In_Place_Customer_Orders_Details
					{
						allFieldsVisible= true 
					}
					Menu
					{
						enabled= Create,Viewall,Import,Export,Tab,read_comm,write_comm 
						allFieldsVisible= true 
						ReportPermissions
						{
							All_Menus={"View","Edit","Delete"}
						}
					}
					Shifts
					{
						enabled= Create,Viewall,Modifyall,Import,Export,Tab,read_comm,write_comm 
						allFieldsVisible= true 
						ReportPermissions
						{
							Shifts_Calendar1={"View","Edit","Delete"}
							All_Shifts={"View","Edit","Delete"}
						}
					}
					Inventory
					{
						enabled= Create,Viewall,Import,Export,Tab,read_comm,write_comm 
						allFieldsVisible= true 
						ReportPermissions
						{
							All_Inventories={"View","Edit","Delete"}
							Low_Stock_Items={"View","Edit","Delete"}
						}
					}
					Management_Dashboard
					{
						enabled = tab
					}
				}
			}
			"Shift Manager"
			{
				name = "Shift Manager"
				type = Users_Permissions
				permissions = {Chat:false, Predefined:false, ApiAccess:true, PIIAccess:true, ePHIAccess:true}
				description = "Shift Manager Profile\n"
				ModulePermissions
				{
					Suppliers_Orders_Details
					{
						allFieldsVisible= true 
					}
					Shifts_Types
					{
						allFieldsVisible= true 
						ReportPermissions
						{
							Shifts_Types_Report={"View"}
						}
					}
					Suppliers_Orders
					{
						allFieldsVisible= true 
						ReportPermissions
						{
							Suppliers_Orders_Report={"View","Edit"}
						}
					}
					Online_Customer_Orders_Details
					{
						allFieldsVisible= true 
					}
					Employees
					{
						allFieldsVisible= true 
					}
					Shifts_Assigments
					{
						allFieldsVisible= true 
					}
					Finance_Records
					{
						allFieldsVisible= true 
					}
					Suppliers
					{
						allFieldsVisible= true 
						ReportPermissions
						{
							All_Suppliers={"View"}
						}
					}
					Employees_Absences
					{
						enabled= Create,Tab 
						allFieldsVisible= true 
						ReportPermissions
						{
							Employees_Absences_Report={"View","Edit","Delete"}
						}
					}
					Online_Customer_Orders
					{
						enabled= Create,Viewall,Import,Export,Tab,read_comm,write_comm 
						allFieldsVisible= true 
						ReportPermissions
						{
							Customer_Orders_Online_Report={"View","Edit","Delete"}
						}
					}
					Customers
					{
						allFieldsVisible= true 
					}
					In_Place_Customer_Orders
					{
						enabled= Create,Viewall,Import,Export,Tab,read_comm,write_comm 
						allFieldsVisible= true 
						ReportPermissions
						{
							Orders_In_Place_Report={"View","Edit","Delete"}
						}
					}
					Suppliers_Products
					{
						allFieldsVisible= true 
					}
					Recipes
					{
						allFieldsVisible= true 
					}
					In_Place_Customer_Orders_Details
					{
						allFieldsVisible= true 
					}
					Menu
					{
						enabled= Create,Viewall,Import,Export,Tab,read_comm,write_comm 
						allFieldsVisible= true 
						ReportPermissions
						{
							All_Menus={"View"}
						}
					}
					Shifts
					{
						enabled= Create,Viewall,Import,Export,Tab,read_comm,write_comm 
						allFieldsVisible= true 
						ReportPermissions
						{
							Shifts_Calendar1={"View"}
							All_Shifts={"View","Edit","Delete"}
						}
					}
					Inventory
					{
						enabled= Create,Viewall,Import,Export,Tab,read_comm,write_comm 
						allFieldsVisible= true 
						ReportPermissions
						{
							All_Inventories={"View","Edit","Delete"}
							Low_Stock_Items={"View","Edit","Delete"}
						}
					}
				}
			}
			"Customer"
			{
				name = "Customer"
				type = Customer_Portal
				permissions = {Chat:true, Predefined:true, ApiAccess:true, PIIAccess:true, ePHIAccess:true}
				description = "This is the default profile having only add and view permission.\n"
			}
			roles
			{
				"CEO"
				{
					description = "User belonging to this role can access data of all other users."
				}
			}
	}


	web
	{
		forms
		{
			form Customers
			{
				label placement = left
			}
			form Employees
			{
				label placement = left
			}
			form Employees_Absences
			{
				label placement = left
			}
			form Finance_Records
			{
				label placement = left
			}
			form In_Place_Customer_Orders
			{
				label placement = left
			}
			form In_Place_Customer_Orders_Details
			{
				label placement = left
			}
			form Inventory
			{
				label placement = left
			}
			form Menu
			{
				label placement = left
			}
			form Online_Customer_Orders
			{
				label placement = left
			}
			form Online_Customer_Orders_Details
			{
				label placement = left
			}
			form Recipes
			{
				label placement = left
			}
			form Shifts
			{
				label placement = left
			}
			form Shifts_Assigments
			{
				label placement = left
			}
			form Shifts_Types
			{
				label placement = left
			}
			form Suppliers
			{
				label placement = left
			}
			form Suppliers_Orders
			{
				label placement = left
			}
			form Suppliers_Orders_Details
			{
				label placement = left
			}
			form Suppliers_Products
			{
				label placement = left
			}
		}
		reports
		{
			report All_Customers
			{
				quickview
				(
					layout
					(
		 				type = -1
						datablock1
						(
							layout type = -1
							fields
							(
								customer_name as "Name"
								customer_phone as "Phone"
								customer_email as "Email"
								customer_address as "Address"
								returning_customer as "Returning Customer"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
						record
						(
							Edit   	   
							Duplicate   	   
							Delete   	   
    					)
    				)
    				action
    				(
						on click
						(
							View Record   	   
    					)
						on right click
						(
							Edit   	   
							Delete   	   
							Duplicate   	   
							View Record   	   
    					)
     				)
				)

				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
							layout type = -2
							fields
							(
								customer_name as "Name"
								customer_phone as "Phone"
								customer_email as "Email"
								customer_address as "Address"
								returning_customer as "Returning Customer"
								orders_history.order_date_time as "Orders History"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
    				)
				)
			}
			report Orders_In_Place_Report
			{
				quickview
				(
					layout
					(
		 				type = -1
						datablock1
						(
							layout type = -1
							fields
							(
								order_date_time as "Order Date-Time"
								customer_phone as "Phone"
								customer_name as "Name"
								customer_address as "Address"
								delivery as "Delivery"
								discount as "Discount (%)"
								total_order_price as "Total Order Price"
								"Order Received"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    	 				)
						record
						(
							Edit   	   
							Duplicate   	   
    					)
    				)
    				action
    				(
						on click
						(
							View Record   	   
    					)
						on right click
						(
							Edit   	   
							Duplicate   	   
							View Record   	   
    					)
     				)
				)

				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
							layout type = -2
							fields
							(
								customer_address as "Address"
								order_date_time as "Order Date-Time"
								delivery as "Delivery"
								customer_phone as "Phone"
								customer_name as "Name"
								order_received as "Order received"
								order_received_date_time as "Received Date-Time"
								order_details.menu_item as "Order Details"
								discount as "Discount (%)"
								total_order_price as "Total Order Price"
								credit_card_number as "Credit Card Number"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
    				)
				)
			}
			report Customer_Orders_Details_In_Place_Report
			{
				quickview
				(
					layout
					(
		 				type = -1
						datablock1
						(
							layout type = -1
							fields
							(
								quantity as "Quantity"
								unit_price as "Unit Price"
								total_price_per_item as "Total Price Per Item"
								order_number as "Order Number"
								menu_item as "Menu Item"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
						record
						(
							Edit   	   
							Duplicate   	   
							Delete   	   
    					)
    				)
    				action
    				(
						on click
						(
							View Record   	   
    					)
						on right click
						(
							Edit   	   
							Delete   	   
							Duplicate   	   
							View Record   	   
    					)
     				)
				)

				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
							layout type = -2
							fields
							(
								quantity as "Quantity"
								unit_price as "Unit Price"
								total_price_per_item as "Total Price Per Item"
								order_number as "Order Number"
								menu_item as "Menu Item"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
    				)
				)
			}
			report Customer_Orders_Online_Report
			{
				quickview
				(
					layout
					(
		 				type = -1
						datablock1
						(
							layout type = -1
							fields
							(
								customer_name as "Name"
								customer_phone as "Phone"
								customer_address as "Address"
								order_date_time as "Order Date-Time"
								delivery as "Delivery"
								total_order_price as "Total Order Price"
								"online customer order received"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
						record
						(
							Edit   	   
							Duplicate   	   
    					)
    				)
    				action
    				(
						on click
						(
							View Record   	   
    					)
						on right click
						(
							Edit   	   
							Duplicate   	   
							View Record   	   
    					)
     				)
				)

				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
							layout type = -2
							fields
							(
								customer_name as "Name"
								customer_phone as "Phone"
								customer_email as "Email"
								customer_address as "Address"
								order_date_time as "Order Date-Time"
								order_received_box_online as "Order received"
								received_order_date_time as "Received Date-Time"
								order_details.menu_item as "Order Details"
								delivery as "Delivery"
								total_order_price as "Total Order Price"
								credit_card_number as "Credit Card Number"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
    				)
				)
			}
			report Online_Customer_Orders_Details_Report
			{
				quickview
				(
					layout
					(
		 				type = -1
						datablock1
						(
							layout type = -1
							fields
							(
								quantity as "Quantity"
								unit_price as "Unit Price"
								total_price_per_item as "Total Price Per Item"
								order_number as "Order Number"
								menu_item as "Menu Item"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
						record
						(
							Edit   	   
							Duplicate   	   
							Delete   	   
    					)
    				)
    				action
    				(
						on click
						(
							View Record   	   
    					)
						on right click
						(
							Edit   	   
							Delete   	   
							Duplicate   	   
							View Record   	   
    					)
     				)
				)

				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
							layout type = -2
							fields
							(
								quantity as "Quantity"
								unit_price as "Unit Price"
								total_price_per_item as "Total Price Per Item"
								order_number as "Order Number"
								menu_item as "Menu Item"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
    				)
				)
			}
			report All_Inventories
			{
				quickview
				(
					layout
					(
		 				type = -1
						datablock1
						(
							layout type = -1
							fields
							(
								product_name as "Product Name"
								current_stock as "Current Stock"
								saftey_stock as "Saftey Stock"
								unit_of_measure as "Unit Of Measure"
								shortage as "Shortage"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
						record
						(
							Edit   	   
							Duplicate   	   
							Delete   	   
    					)
    				)
    				action
    				(
						on click
						(
							View Record   	   
    					)
						on right click
						(
							Edit   	   
							Delete   	   
							Duplicate   	   
							View Record   	   
    					)
     				)
				)

				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
							layout type = -2
							fields
							(
								product_name as "Product Name"
								current_stock as "Current Stock"
								saftey_stock as "Saftey Stock"
								unit_of_measure as "Unit Of Measure"
								shortage as "Shortage"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
    				)
				)
			}
			report All_Menus
			{
				quickview
				(
					layout
					(
		 				type = -1
						datablock1
						(
							layout type = -1
							fields
							(
								item_name as "Item Name"
								item_image as "Image"
								item_description as "Description"
								item_price as "Price"
								available as "Available"
								recipe.product as "Recipe"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
						record
						(
							Edit   	   
							Duplicate   	   
							Delete   	   
    					)
    				)
    				action
    				(
						on click
						(
							View Record   	   
    					)
						on right click
						(
							Edit   	   
							Delete   	   
							Duplicate   	   
							View Record   	   
    					)
     				)
				)

				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
							layout type = -2
							fields
							(
								item_name as "Item Name"
								item_image as "Image"
								item_description as "Description"
								item_price as "Price"
								available as "Available"
								recipe.product as "Recipe"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
    				)
				)
			}
			report All_Recipes
			{
				quickview
				(
					layout
					(
		 				type = -1
						datablock1
						(
							layout type = -1
							fields
							(
								product as "Product"
								quantity as "Quantity"
								item as "Item"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
						record
						(
							Edit   	   
							Duplicate   	   
							Delete   	   
    					)
    				)
    				action
    				(
						on click
						(
							View Record   	   
    					)
						on right click
						(
							Edit   	   
							Delete   	   
							Duplicate   	   
							View Record   	   
    					)
     				)
				)

				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
							layout type = -2
							fields
							(
								product as "Product"
								quantity as "Quantity"
								item as "Item"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
    				)
				)
			}
			report All_Suppliers
			{
				quickview
				(
					layout
					(
		 				type = -1
						datablock1
						(
							layout type = -1
							fields
							(
								supplier_name as "Name"
								supplier_phone as "Phone"
								supplier_email as "Email"
								supplier_address as "Address"
								supplies_products.inventory as "Supplies Products"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
						record
						(
							Edit   	   
							Duplicate   	   
							Delete   	   
    					)
    				)
    				action
    				(
						on click
						(
							View Record   	   
    					)
						on right click
						(
							Edit   	   
							Delete   	   
							Duplicate   	   
							View Record   	   
    					)
     				)
				)

				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
							layout type = -2
							fields
							(
								supplier_name as "Name"
								supplier_phone as "Phone"
								supplier_email as "Email"
								supplier_address as "Address"
								supplies_products.inventory as "Supplies Products"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
    				)
				)
			}
			report Suppliers_Products_Report
			{
				quickview
				(
					layout
					(
		 				type = -1
						datablock1
						(
							layout type = -1
							fields
							(
								supplier as "Supplier"
								inventory as "Inventory"
								products_price as "Price"
								inventory.unit_of_measure as "Unit Of Measure"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
						record
						(
							Edit   	   
							Duplicate   	   
							Delete   	   
    					)
    				)
    				action
    				(
						on click
						(
							View Record   	   
    					)
						on right click
						(
							Edit   	   
							Delete   	   
							Duplicate   	   
							View Record   	   
    					)
     				)
				)

				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
							layout type = -2
							fields
							(
								products_price as "Price"
								supplier as "Supplier"
								inventory as "Inventory"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
    				)
				)
			}
			report Suppliers_Orders_Report
			{
				quickview
				(
					layout
					(
		 				type = -1
						datablock1
						(
							layout type = -1
							fields
							(
								supplier as "Supplier"
								order_date_time as "Order Date-Time"
								arrival_date_time as "Arrival Date-Time"
								total_order_price as "Total Order Price"
								"Order Received"
								"Duplicate Order"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
						record
						(
							Edit   	   
							Delete   	   
    					)
    				)
    				action
    				(
						on click
						(
							View Record   	   
    					)
						on right click
						(
							Edit   	   
							Delete   	   
							View Record   	   
    					)
     				)
				)

				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
							layout type = -2
							fields
							(
								supplier as "Supplier"
								order_date_time as "Order Date-Time"
								arrival_date_time as "Arrival Date-Time"
								order_received as "Order Received"
								order_details.supplier as "Order Details"
								total_order_price as "Total Order Price"
								"Order Received"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
    				)
				)
			}
			report Suppliers_Orders_Details_Report
			{
				quickview
				(
					layout
					(
		 				type = -1
						datablock1
						(
							layout type = -1
							fields
							(
								supplier as "Supplier"
								product as "Product"
								quantity as "Quantity"
								unit_price as "Unit Price"
								total_price_per_product as "Total Price Per Product"
								suppliers_order_number as "Suppliers Order Number"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
						record
						(
							Edit   	   
							Duplicate   	   
							Delete   	   
    					)
    				)
    				action
    				(
						on click
						(
							View Record   	   
    					)
						on right click
						(
							Edit   	   
							Delete   	   
							Duplicate   	   
							View Record   	   
    					)
     				)
				)

				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
							layout type = -2
							fields
							(
								supplier as "Supplier"
								product as "Product"
								quantity as "Quantity"
								unit_price as "Unit Price"
								total_price_per_product as "Total Price Per Product"
								suppliers_order_number as "Suppliers Order Number"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
    				)
				)
			}
			report All_Employees
			{
				quickview
				(
					layout
					(
		 				type = -1
						datablock1
						(
							layout type = -1
							fields
							(
								employee_name as "Name"
								employee_phone as "Phone"
								employee_type as "Type"
								hourly_rate as "Hourly Rate"
								is_active as "Active"
								employee_email as "Email"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
						record
						(
							Edit   	   
							Duplicate   	   
							Delete   	   
    					)
    				)
    				action
    				(
						on click
						(
							View Record   	   
    					)
						on right click
						(
							Edit   	   
							Delete   	   
							Duplicate   	   
							View Record   	   
    					)
     				)
				)

				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
							layout type = -2
							fields
							(
								employee_name as "Name"
								employee_phone as "Phone"
								employee_type as "Type"
								hourly_rate as "Hourly Rate"
								is_active as "Active"
								employee_email as "Email"
								shifts.shift as "Shifts"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
    				)
				)
			}
			report Shifts_Types_Report
			{
				quickview
				(
					layout
					(
		 				type = -1
						datablock1
						(
							layout type = -1
							fields
							(
								shift_type as "Shift Type"
								start_time as "Start Time"
								end_time as "End Time"
								cooks_needed as "Cooks Needed"
								line_workers_needed as "Line Workers Needed"
								cleanings_needed as "Cleanings Needed"
								delivery_driver_needed as "Delivery Driver Needed"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
						record
						(
							Edit   	   
							Duplicate   	   
							Delete   	   
    					)
    				)
    				action
    				(
						on click
						(
							View Record   	   
    					)
						on right click
						(
							Edit   	   
							Delete   	   
							Duplicate   	   
							View Record   	   
    					)
     				)
				)

				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
							layout type = -2
							fields
							(
								shift_type as "Shift Type"
								start_time as "Start Time"
								end_time as "End Time"
								cooks_needed as "Cooks Needed"
								line_workers_needed as "Line Workers Needed"
								cleanings_needed as "Cleanings Needed"
								delivery_driver_needed as "Delivery Driver Needed"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
    				)
				)
			}
			report All_Shifts
			{
				quickview
				(
					layout
					(
		 				type = -1
						datablock1
						(
							layout type = -1
							fields
							(
								shift_date as "Date"
								shifts_type as "Shifts Type"
								weekday as "Weekday"
								shift_start_time as "Start Time"
								shift_end_time as "End Time"
								shift_assigments.employee as "Assigments"
								cooks_needed_num as "Cooks Needed Num"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
						record
						(
							Edit   	   
							Duplicate   	   
							Delete   	   
    					)
    				)
    				action
    				(
						on click
						(
							View Record   	   
    					)
						on right click
						(
							Edit   	   
							Delete   	   
							Duplicate   	   
							View Record   	   
    					)
     				)
				)

				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
							layout type = -2
							fields
							(
								shift_date as "Date"
								shifts_type as "Shifts Type"
								weekday as "Weekday"
								shift_start_time as "Start Time"
								shift_end_time as "End Time"
								shift_assigments.employee as "Assigments"
								cooks_needed_num as "Cooks Needed Num"
								line_workers_needed_num as "Line Workers Needed Num"
								cleanings_needed_num as "Cleanings Needed Num"
								delivery_driver_needed_num as "Delivery Driver Needed Num"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
    				)
				)
			}
			report Shifts_Assigments_Report
			{
				quickview
				(
					layout
					(
		 				type = -1
						datablock1
						(
							layout type = -1
							fields
							(
								shift as "Shift"
								employee as "Employee"
								shift.shifts_type as "Shifts Type"
								employee.employee_type as "Type"
								employee_type as "Type"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
						record
						(
							Edit   	   
							Duplicate   	   
							Delete   	   
    					)
    				)
    				action
    				(
						on click
						(
							View Record   	   
    					)
						on right click
						(
							Edit   	   
							Delete   	   
							Duplicate   	   
							View Record   	   
    					)
     				)
				)

				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
							layout type = -2
							fields
							(
								shift as "Shift"
								employee as "Employee"
								employee_type as "Type"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
    				)
				)
			}
			report Employees_Absences_Report
			{
				quickview
				(
					layout
					(
		 				type = -1
						datablock1
						(
							layout type = -1
							fields
							(
								employee as "Employee"
								reason as "Reason"
								absence_date as "Date"
								shifts_types as "Shifts Types"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
						record
						(
							Edit   	   
							Duplicate   	   
							Delete   	   
    					)
    				)
    				action
    				(
						on click
						(
							View Record   	   
    					)
						on right click
						(
							Edit   	   
							Delete   	   
							Duplicate   	   
							View Record   	   
    					)
     				)
				)

				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
							layout type = -2
							fields
							(
								employee as "Employee"
								reason as "Reason"
								absence_date as "Date"
								shifts_types as "Shifts Types"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
    				)
				)
			}
			report All_Finance_Records
			{
				quickview
				(
					layout
					(
		 				type = -1
						datablock1
						(
							layout type = -1
							fields
							(
								record_type_dropdown as "Record Type"
								record_type_text as "Record Type Description"
								record_date_time as "Date-Time"
								amount as "Amount"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
						record
						(
							Edit   	   
							Duplicate   	   
							Delete   	   
    					)
    				)
    				action
    				(
						on click
						(
							View Record   	   
    					)
						on right click
						(
							Edit   	   
							Delete   	   
							Duplicate   	   
							View Record   	   
    					)
     				)
				)

				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
							layout type = -2
							fields
							(
								record_type_text as "Record Type Description"
								record_date_time as "Date-Time"
								amount as "Amount"
								in_place_customer_orders as "In Place Customer Orders"
								online_customer_orders as "Online Customer Orders"
								suppliers_orders as "Suppliers Orders"
								record_type_dropdown as "Record Type"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
    				)
				)
			}
			report Low_Stock_Items
			{
				quickview
				(
					layout
					(
		 				type = -1
						datablock1
						(
							layout type = -1
							fields
							(
								product_name as "Product Name"
								current_stock as "Current Stock"
								saftey_stock as "Saftey Stock"
								unit_of_measure as "Unit Of Measure"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
						record
						(
							Edit   	   
							Duplicate   	   
							Delete   	   
    					)
    				)
    				action
    				(
						on click
						(
							View Record   	   
    					)
						on right click
						(
							Edit   	   
							Delete   	   
							Duplicate   	   
							View Record   	   
    					)
     				)
				)

				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
							layout type = -2
							fields
							(
								product_name as "Product Name"
								current_stock as "Current Stock"
								saftey_stock as "Saftey Stock"
								unit_of_measure as "Unit Of Measure"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
    				)
				)
			}
			report Customers_Map
			{
				quickview
				(
					layout
					(
		 				type = 1
						datablock1
						(
							layout type = 1
							fields
							(
								customer_name as "Name"
								customer_address as "Address"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
						record
						(
							Edit   	   
							Duplicate   	   
							Delete   	   
    					)
    				)
    				action
    				(
						on click
						(
							View Record   	   
    					)
						on right click
						(
							Edit   	   
							Delete   	   
							Duplicate   	   
							View Record   	   
    					)
     				)
				)

				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
							layout type = -2
							fields
							(
								customer_name as "Name"
								customer_phone as "Phone"
								customer_email as "Email"
								customer_address as "Address"
								returning_customer as "Returning Customer"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
    				)
				)
			}
			report Shifts_Calendar1
			{
				quickview
				(
					layout
					(
		 				type = 2
						datablock1
						(
							layout type = 4
							fields
							(
								shifts_type as "Shifts Type"
								shift_date as "Date"
								shift_start_time as "Start Time"
								shift_end_time as "End Time"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    	 				)
						record
						(
							Edit   	   
							Duplicate   	   
							Delete   	   
    					)
    				)
    				action
    				(
						on click
						(
							View Record   	   
    					)
						on right click
						(
							Edit   	   
							Delete   	   
							Duplicate   	   
							View Record   	   
    					)
     				)
				)

				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
							layout type = -2
							fields
							(
								shift_start_time as "Start Time"
								shifts_type as "Shifts Type"
								shift_end_time as "End Time"
								shift_assigments.employee as "Assigments"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
    				)
				)
			}
			report Menu_Report_For_Customers1
			{
				quickview
				(
					layout
					(
		 				type = -3
						datablock1
						(
							layout type = -3
							fields
							(
								item_image as "Image"
								item_name as "Item Name"
								item_price as "Price"
								available as "Available"
								item_description as "Description"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    	 				)
						record
						(
							Edit   	   
							Duplicate   	   
							Delete   	   
    					)
    				)
    				action
    				(
						on click
						(
							View Record   	   
    					)
						on right click
						(
							Edit   	   
							Delete   	   
							Duplicate   	   
							View Record   	   
    					)
     				)
				)

				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
							layout type = -2
							fields
							(
								item_image as "Image"
								item_name as "Item Name"
								item_price as "Price"
								available as "Available"
								item_description as "Description"
							)
						)
					)
					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    	 				)
    				)
				)
			}
			report financial_dashboard
			{
				legend = RIGHT
			}
 
			report most_wanted_item
			{
				legend = RIGHT
			}
		}
		menu
		{
			unused
			{
				form  In_Place_Customer_Orders
				{
					icon = "business-progress"
				}
				form  In_Place_Customer_Orders_Details
				{
					icon = "sport-cardio"
				}
				form  Online_Customer_Orders_Details
				{
					icon = "users-2-contacts-44"
				}
				form  Inventory
				{
					icon = "shopping-stock"
				}
				report Low_Stock_Items
				{
					icon = "shopping-stock"
				}
				form  Menu
				{
					icon = "food-microwave"
				}
				form  Recipes
				{
					icon = "food-recipe-book-47"
				}
				report All_Recipes
				{
					icon = "tech-desktop"
				}
				form  Suppliers
				{
					icon = "tech-2-pci-card"
				}
				form  Suppliers_Products
				{
					icon = "tech-desktop"
				}
				report Suppliers_Products_Report
				{
					icon = "tech-desktop"
				}
				form  Suppliers_Orders
				{
					icon = "shopping-list"
				}
				form  Suppliers_Orders_Details
				{
					icon = "shopping-list"
				}
				report Suppliers_Orders_Details_Report
				{
					icon = "tech-desktop"
				}
				form  Employees
				{
					icon = "users-single-04"
				}
				form  Shifts_Types
				{
					icon = "business-coins"
				}
				form  Shifts
				{
					icon = "business-coins"
				}
				form  Shifts_Assigments
				{
					icon = "business-coins"
				}
				report Shifts_Assigments_Report
				{
					icon = "tech-desktop"
				}
				form  Employees_Absences
				{
					icon = "users-single-04"
				}
				form  Finance_Records
				{
					icon = "business-bank"
				}
 
				report financial_dashboard
				{
					icon = "business-bank"
				}
				form  Customers
				{
					icon = "shopping-mobile-card"
				}
				report Customers_Map
				{
					icon = "shopping-mobile-card"
				}
				systemcomponent
				{
					type = localization
					displayname = "Language Selection"
					icon = "education-language"
				}
				systemcomponent
				{
					type = connection
					displayname = "Integrations"
					icon = "tech-2-connection"
				}
				systemcomponent
				{
					type = approval
					approval status = pending
					displayname = "Pending Tasks"
					icon = "ui-2-hourglass"
				}
				systemcomponent
				{
					type = approval
					approval status = completed
					displayname = "Completed Tasks"
					icon = "design-todo"
				}
				report Customer_Orders_Details_In_Place_Report
				{
					icon = "tech-desktop"
				}
				report Online_Customer_Orders_Details_Report
				{
					icon = "tech-desktop"
				}
 
				report most_wanted_item
				{
					icon = "users-2-contacts-44"
				}
				section SharedAnalytics_Section
				{
					type = shared_user_report_section
					displayname = "Reports"
					icon = "business-chart-bar-33"
				}
			}
			space Space
			{
				displayname = "Space"
				icon = "objects-spaceship"

				section dashboard_page_finance
				{
					displayname = "dashboard page finance"
					icon = "design-design-dev"
					page Management_Dashboard
					{
						icon = "ui-1-dashboard-half"
					}
				}
				section In_Place_Customer_Orders
				{
					displayname = "In Place Customer Orders"
					icon = "business-progress"
					report Orders_In_Place_Report
					{
						icon = "tech-desktop"
					}
				}
				section Online_Customer_Orders
				{
					displayname = "Online Customer Orders"
					icon = "tech-2-p-check"
					form  Online_Customer_Orders
					{
						icon = "tech-2-p-check"
					}
					report Customer_Orders_Online_Report
					{
						icon = "tech-desktop"
					}
				}
				section Suppliers_Orders
				{
					displayname = "Suppliers Orders"
					icon = "shopping-list"
					report Suppliers_Orders_Report
					{
						icon = "tech-desktop"
					}
				}
				section Shifts
				{
					displayname = "Shifts"
					icon = "business-coins"
					report All_Shifts
					{
						icon = "tech-desktop"
					}
					report Shifts_Calendar1
					{
						icon = "business-coins"
					}
				}
				section Employees_Absences
				{
					displayname = "Employees Absences"
					icon = "users-single-04"
					report Employees_Absences_Report
					{
						icon = "tech-desktop"
					}
				}
				section Inventory
				{
					displayname = "Inventory"
					icon = "shopping-stock"
					report All_Inventories
					{
						icon = "tech-desktop"
					}
				}
					report Menu_Report_For_Customers1
					{
						icon = "ui-2-menu-square"
					}
				section Back_Office
				{
					displayname = "Back-Office"
					icon = "furniture-cabinet"
					report All_Suppliers
					{
						icon = "tech-desktop"
					}
					report All_Customers
					{
						icon = "tech-desktop"
					}
					report All_Employees
					{
						icon = "tech-desktop"
					}
					report All_Menus
					{
						icon = "tech-desktop"
					}
					report All_Finance_Records
					{
						icon = "tech-desktop"
					}
					report Shifts_Types_Report
					{
						icon = "tech-desktop"
					}
				}
			}
			preference
			{
				icon
				{
					style = outline
					show = {section}
				}
			}
		}
		customize
		{
			new theme = 6
			font = "lato"
			color options
			{
				color = "3"
			}
			logo
			{
				preference = "none"
				placement = "left"
			}
		}
	}
	phone
	{
		forms
		{
			form Customers
			{
				label placement = auto
			}
			form Employees
			{
				label placement = auto
			}
			form Employees_Absences
			{
				label placement = auto
			}
			form Finance_Records
			{
				label placement = auto
			}
			form In_Place_Customer_Orders
			{
				label placement = auto
			}
			form In_Place_Customer_Orders_Details
			{
				label placement = auto
			}
			form Inventory
			{
				label placement = auto
			}
			form Menu
			{
				label placement = auto
			}
			form Online_Customer_Orders
			{
				label placement = auto
			}
			form Online_Customer_Orders_Details
			{
				label placement = auto
			}
			form Recipes
			{
				label placement = auto
			}
			form Shifts
			{
				label placement = auto
			}
			form Shifts_Assigments
			{
				label placement = auto
			}
			form Shifts_Types
			{
				label placement = auto
			}
			form Suppliers
			{
				label placement = auto
			}
			form Suppliers_Orders
			{
				label placement = auto
			}
			form Suppliers_Orders_Details
			{
				label placement = auto
			}
			form Suppliers_Products
			{
				label placement = auto
			}
		}
		customize
		{
			layout = slidingpane
			font = "default"
			style = "3"
			color options
			{
				color = green
			}
			logo
			{
				preference = "none"
			}
		}
	}
	tablet
	{
		forms
		{
			form Customers
			{
				label placement = auto
			}
			form Employees
			{
				label placement = auto
			}
			form Employees_Absences
			{
				label placement = auto
			}
			form Finance_Records
			{
				label placement = auto
			}
			form In_Place_Customer_Orders
			{
				label placement = auto
			}
			form In_Place_Customer_Orders_Details
			{
				label placement = auto
			}
			form Inventory
			{
				label placement = auto
			}
			form Menu
			{
				label placement = auto
			}
			form Online_Customer_Orders
			{
				label placement = auto
			}
			form Online_Customer_Orders_Details
			{
				label placement = auto
			}
			form Recipes
			{
				label placement = auto
			}
			form Shifts
			{
				label placement = auto
			}
			form Shifts_Assigments
			{
				label placement = auto
			}
			form Shifts_Types
			{
				label placement = auto
			}
			form Suppliers
			{
				label placement = auto
			}
			form Suppliers_Orders
			{
				label placement = auto
			}
			form Suppliers_Orders_Details
			{
				label placement = auto
			}
			form Suppliers_Products
			{
				label placement = auto
			}
		}
		customize
		{
			layout = slidingpane
			font = "default"
			style = "3"
			color options
			{
				color = green
			}
			logo
			{
				preference = "none"
			}
		}
	}
	translation
{
{"Language_Settings":{"LANGAGUE_WITH_LOGIN":"browser"}}
}
	reports configuration
	{
	
		Version = 1251000320151533
		Key     = "1Wr7Vb12QNEGJ1EJ1ASs8SxuzO0KjVs5aOxzSkRvtmCzUTA7Sf156yJebg60nbKMe19pjmFRN1hxT9M3kqAQfH2n35nY6hkr0vm6"
	}
}
